{
	Tools = ordered() {
		EssentialActiveCaption = GroupOperator {
			Inputs = ordered() {
				InputHideCacheModeBtn = InstanceInput {
					SourceOp = "Options",
					Source = "HideCache1",
				},
				InputCacheMode = InstanceInput {
					SourceOp = "Options",
					Source = "BtnCacheMode",
				},
				Input1 = InstanceInput {
					SourceOp = "Options",
					Source = "CaptionInput",
				},
				Input3 = InstanceInput {
					SourceOp = "Text_0",
					Source = "Font",
					ControlGroup = 22,
				},
				Input4 = InstanceInput {
					SourceOp = "Text_0",
					Source = "Style",
					ControlGroup = 22,
				},
				InputStyleLevel = InstanceInput {
					SourceOp = "Options",
					Source = "AnimationLevel",
				},
				InputCenter = InstanceInput {
					SourceOp = "TransformLast",
					Source = "TitleCenter",
				},
				InputTextSize = InstanceInput {
					SourceOp = "Text1",
					Source = "Size",
					Default = 0.05,
				},
				Input10 = InstanceInput {
					SourceOp = "Text1",
					Source = "CharacterSpacingClone",
					Name = "Tracking",
					Default = 1,
				},
				InputWordSpacing = InstanceInput {
					SourceOp = "Text1",
					Source = "WordSpacing",
					Default = 1,
					MinScale = -5,
					MaxScale = 5,
				},
				InputLineSpacing = InstanceInput {
					SourceOp = "Text1",
					Source = "LineSpacingClone",
					Default = 1,
				},
				InputHAnchor = InstanceInput {
					SourceOp = "Text1",
					Source = "HorizontalLeftCenterRight",
					Default = 0,
					MaxScale = 1,
					MinScale = -1,
				},
				Input2 = InstanceInput {
					SourceOp = "Options",
					Source = "ApplyStyles",
					Name = "Reset Caption Words and Positions",
				},

				InputOtherControls = InstanceInput {
					SourceOp = "Options",
					Source = "LabelOtherControls",
				},
				InputIsTextRTL = InstanceInput {
					SourceOp = "Options",
					Source = "IsTextRTL",
				},
				InputEnableShadow = InstanceInput {
					SourceOp = "DropShadow1",
					Source = "Blend",
					Name = "Shadow",
				},
				InputTransformAngle = InstanceInput {
					SourceOp = "TransformLast",
					Source = "Angle",
					Name = "Caption Rotation",
				},
				InputRotateWordX = InstanceInput {
					SourceOp = "Text1",
					Source = "WordAngleX",
					Name = "Word Rotation X",
				},
				InputRotateWordY = InstanceInput {
					SourceOp = "Text1",
					Source = "WordAngleY",
					Name = "Y",
				},
				InputRotateWordZ = InstanceInput {
					SourceOp = "Text1",
					Source = "WordAngleZ",
					Name = "Z",
				},
				InputEnableOutline = InstanceInput {
					SourceOp = "Text1",
					Source = "Enabled2",
					Name = "Text Outline",
				},
				InputHideOutlineOptions = InstanceInput {
					SourceOp = "Options",
					Source = "HideOutlineOptions",
				},
				InputOutlineThickness = InstanceInput {
					SourceOp = "Text1",
					Source = "Thickness2",
					Default = 0.05,
					Name = "Thickness",
					MaxScale = 0.2,
				},
				InputOutlineJoinStyle = InstanceInput {
					SourceOp = "Text1",
					Source = "JoinStyle2",
					Name = "Join Style",
				},
				InputOutlineColorRed = InstanceInput {
					SourceOp = "Text1",
					Source = "Red2",
					Name = "Color",
					ControlGroup = 25,
					Default = 0,
				},
				InputOutlineColorGreen = InstanceInput {
					SourceOp = "Text1",
					Source = "Green2",
					ControlGroup = 25,
					Default = 0,
				},
				InputOutlineColorBlue = InstanceInput {
					SourceOp = "Text1",
					Source = "Blue2",
					ControlGroup = 25,
					Default = 0,
				},
				
				InputHideCacheResetInputs = InstanceInput {
					SourceOp = "Options",
					Source = "HideCacheResetInputs",
					Expression = "Options.CacheMode",
				},
				InputExitCacheMode = InstanceInput {
					SourceOp = "Options",
					Source = "BtnExitCacheMode",
				},
				InputCaptionInCacheMode = InstanceInput {
					SourceOp = "Options",
					Source = "CaptionInput",
				},
				InputStyleLevelInCacheMode = InstanceInput {
					SourceOp = "Options",
					Source = "AnimationLevel",
				},
				InputResetInCacheMode = InstanceInput {
					SourceOp = "Options",
					Source = "ApplyStyles",
					Name = "Reset Caption Words and Positions",
				},
				InputCenterCacheMode = InstanceInput {
					SourceOp = "TransformLast",
					Source = "TitleCenter",
				},
				InputAngleCacheMode = InstanceInput {
					SourceOp = "TransformLast",
					Source = "Angle",
					Name = "Caption Rotation",
				},
				InputShadowCacheMode = InstanceInput {
					SourceOp = "DropShadow1",
					Source = "Blend",
					Name = "Shadow",
				},
				InputLine01CacheMode = InstanceInput {
					SourceOp = "Merge1",
					Source = "Blank6",
				},

				InputWordSelection = InstanceInput {
					SourceOp = "Options",
					Source = "WordSelection",
				},
				InputHideWord1 = InstanceInput {
					SourceOp = "Options",
					Source = "HideWord1",
				},
				InputWord1 = InstanceInput {
					SourceOp = "Options",
					Source = "Word1",
					Name = "",
				},
				InputHideWord2 = InstanceInput {
					SourceOp = "Options",
					Source = "HideWord2",
				},
				InputWord2 = InstanceInput {
					SourceOp = "Options",
					Source = "Word2",
					Name = "",
				},
				InputHideWord3 = InstanceInput {
					SourceOp = "Options",
					Source = "HideWord3",
				},
				InputWord3 = InstanceInput {
					SourceOp = "Options",
					Source = "Word3",
					Name = "",
				},
				InputHideWord4 = InstanceInput {
					SourceOp = "Options",
					Source = "HideWord4",
				},
				InputWord4 = InstanceInput {
					SourceOp = "Options",
					Source = "Word4",
					Name = "",
				},
				InputHideWord5 = InstanceInput {
					SourceOp = "Options",
					Source = "HideWord5",
				},
				InputWord5 = InstanceInput {
					SourceOp = "Options",
					Source = "Word5",
					Name = "",
				},
				InputHideWord6 = InstanceInput {
					SourceOp = "Options",
					Source = "HideWord6",
				},
				InputWord6 = InstanceInput {
					SourceOp = "Options",
					Source = "Word6",
					Name = "",
				},

				InputApplyBlank2 = InstanceInput {
					SourceOp = "Merge1",
					Source = "Blank6",
				},
				InputBtnCalcTimeStart = InstanceInput {
					SourceOp = "Options",
					Source = "BtnCalcTimeStart",
					Width = 0.5,
				},
				InputBtnCalcTimeEnd = InstanceInput {
					SourceOp = "Options",
					Source = "BtnCalcTimeEnd",	
					Width = 0.5,
				},
				InputBtnCopyAnimationTime = InstanceInput {
					SourceOp = "Options",
					Source = "BtnCopyAnimationTime",	
				},

				InputLabelWord1 = InstanceInput {
					SourceOp = "Options",
					Source = "LabelWord1",
					Expression = "WordSelection==0 and 1 or 0",
				},
				InputAnimationStart1 = InstanceInput {
					SourceOp = "Merge1",
					Source = "AnimationStartManual",
					Name = "Animation Start",
					Default = 0,
				},
				InputAnimationTime1 = InstanceInput {
					SourceOp = "Merge1",
					Source = "AnimationTime",
					Default = 10,
				},
				InputOffset1 = InstanceInput {
					SourceOp = "Merge1",
					Source = "TextOffset",
					DefaultX = 0,
					DefaultY = 0,
				},
				InputHideCache3_1 = InstanceInput {
					SourceOp = "Options",
					Source = "HideCache3",
				},
				InputSeparateFont1 = InstanceInput {
					SourceOp = "Text1",
					Source = "SetFont",
				},
				InputHideFont1 = InstanceInput {
					SourceOp = "Text1",
					Source = "HideFont",
				},
				InputText1Font1 = InstanceInput {
					SourceOp = "Text_1",
					Source = "Font",
					ControlGroup = 24,
				},
				InputText1Style1 = InstanceInput {
					SourceOp = "Text_1",
					Source = "Style",
					ControlGroup = 24,
				},
				Input9 = InstanceInput {
					SourceOp = "Text1",
					Source = "FontSize",
					Name = "Size",
					MaxScale = 5,
					Default = 1,
				},
				InputAngle1 = InstanceInput {
					SourceOp = "Text1",
					Source = "AngleZ",
				},
				Input5 = InstanceInput {
					SourceOp = "Text1",
					Source = "FontColorRed",
					Name = "Color",
					ControlGroup = 4,
					Default = 1,
				},
				Input6 = InstanceInput {
					SourceOp = "Text1",
					Source = "FontColorGreen",
					ControlGroup = 4,
					Default = 1,
				},
				Input7 = InstanceInput {
					SourceOp = "Text1",
					Source = "FontColorBlue",
					ControlGroup = 4,
					Default = 1,
				},
				InputLabelWord2 = InstanceInput {
					SourceOp = "Options",
					Source = "LabelWord2",
					Expression = "WordSelection==1 and 1 or 0",
				},
				InputAnimationStart2 = InstanceInput {
					SourceOp = "Merge2",
					Source = "AnimationStartManual",
					Name = "Animation Start",
					Default = 0,
				},
				InputAnimationTime2 = InstanceInput {
					SourceOp = "Merge2",
					Source = "AnimationTime",
					Default = 10,
				},
				InputOffset2 = InstanceInput {
					SourceOp = "Merge2",
					Source = "TextOffset",
					DefaultX = 0,
					DefaultY = 0,
				},
				InputHideCache3_2 = InstanceInput {
					SourceOp = "Options",
					Source = "HideCache3",
				},
				InputSeparateFont2 = InstanceInput {
					SourceOp = "Text2",
					Source = "SetFont",
				},
				InputHideFont2 = InstanceInput {
					SourceOp = "Text2",
					Source = "HideFont",
				},
				InputText2Font = InstanceInput {
					SourceOp = "Text_2",
					Source = "Font",
					ControlGroup = 14,
				},
				InputText2Style = InstanceInput {
					SourceOp = "Text_2",
					Source = "Style",
					ControlGroup = 14,
				},
				Input17 = InstanceInput {
					SourceOp = "Text2",
					Source = "FontSize",
					Name = "Size",
					MaxScale = 5,
					Default = 1,
				},
				InputAngle2 = InstanceInput {
					SourceOp = "Text2",
					Source = "AngleZ",
				},
				Input13 = InstanceInput {
					SourceOp = "Text2",
					Source = "FontColorRed",
					Name = "Color",
					ControlGroup = 8,
					Default = 1,
				},
				Input14 = InstanceInput {
					SourceOp = "Text2",
					Source = "FontColorGreen",
					ControlGroup = 8,
					Default = 0.1843137254902,
				},
				Input15 = InstanceInput {
					SourceOp = "Text2",
					Source = "FontColorBlue",
					ControlGroup = 8,
					Default = 0.5725490196078,
				},
				InputLabelWord4 = InstanceInput {
					SourceOp = "Options",
					Source = "LabelWord4",
					Expression = "WordSelection==3 and 1 or 0",
				},
				InputAnimationStart4 = InstanceInput {
					SourceOp = "Merge4",
					Source = "AnimationStartManual",
					Name = "Animation Start",
					Default = 0,
				},
				InputAnimationTime4 = InstanceInput {
					SourceOp = "Merge4",
					Source = "AnimationTime",
					Default = 10,
				},
				InputOffset4 = InstanceInput {
					SourceOp = "Merge4",
					Source = "TextOffset",
					DefaultX = 0,
					DefaultY = 0,
				},
				InputHideCache3_4 = InstanceInput {
					SourceOp = "Options",
					Source = "HideCache3",
				},
				InputSeparateFont4 = InstanceInput {
					SourceOp = "Text4",
					Source = "SetFont",
				},
				InputHideFont4 = InstanceInput {
					SourceOp = "Text4",
					Source = "HideFont",
				},
				InputText4Font = InstanceInput {
					SourceOp = "Text_4",
					Source = "Font",
					ControlGroup = 5,
				},
				InputText4Style = InstanceInput {
					SourceOp = "Text_4",
					Source = "Style",
					ControlGroup = 5,
				},
				Input25 = InstanceInput {
					SourceOp = "Text4",
					Source = "FontSize",
					Name = "Size",
					MaxScale = 5,
					Default = 1,
				},
				InputAngle4 = InstanceInput {
					SourceOp = "Text4",
					Source = "AngleZ",
				},
				Input21 = InstanceInput {
					SourceOp = "Text4",
					Source = "FontColorRed",
					Name = "Color",
					ControlGroup = 12,
					Default = 1,
				},
				Input22 = InstanceInput {
					SourceOp = "Text4",
					Source = "FontColorGreen",
					ControlGroup = 12,
					Default = 0.4941176470588,
				},
				Input23 = InstanceInput {
					SourceOp = "Text4",
					Source = "FontColorBlue",
					ControlGroup = 12,
					Default = 0.4745098039216,
				},
				InputLabelWord3 = InstanceInput {
					SourceOp = "Options",
					Source = "LabelWord3",
					Expression = "WordSelection==2 and 1 or 0",
				},
				InputAnimationStart3 = InstanceInput {
					SourceOp = "Merge3",
					Source = "AnimationStartManual",
					Name = "Animation Start",
					Default = 0,
				},
				InputAnimationTime3 = InstanceInput {
					SourceOp = "Merge3",
					Source = "AnimationTime",
					Default = 10,
				},
				InputOffset3 = InstanceInput {
					SourceOp = "Merge3",
					Source = "TextOffset",
					DefaultX = 0,
					DefaultY = 0,
				},
				InputHideCache3_3 = InstanceInput {
					SourceOp = "Options",
					Source = "HideCache3",
				},
				InputSeparateFont3 = InstanceInput {
					SourceOp = "Text3",
					Source = "SetFont",
				},
				InputHideFont3 = InstanceInput {
					SourceOp = "Text3",
					Source = "HideFont",
				},
				InputText3Font = InstanceInput {
					SourceOp = "Text_3",
					Source = "Font",
					ControlGroup = 6,
				},
				InputText3Style = InstanceInput {
					SourceOp = "Text_3",
					Source = "Style",
					ControlGroup = 6,
				},
				Input33 = InstanceInput {
					SourceOp = "Text3",
					Source = "FontSize",
					Name = "Size",
					MaxScale = 5,
					Default = 1,
				},
				InputAngle3 = InstanceInput {
					SourceOp = "Text3",
					Source = "AngleZ",
				},
				Input29 = InstanceInput {
					SourceOp = "Text3",
					Source = "FontColorRed",
					Name = "Color",
					ControlGroup = 16,
					Default = 1,
				},
				Input30 = InstanceInput {
					SourceOp = "Text3",
					Source = "FontColorGreen",
					ControlGroup = 16,
					Default = 0.5764705882353,
				},
				Input31 = InstanceInput {
					SourceOp = "Text3",
					Source = "FontColorBlue",
					ControlGroup = 16,
					Default = 0,
				},
				InputLabelWord5 = InstanceInput {
					SourceOp = "Options",
					Source = "LabelWord5",
					Expression = "WordSelection==4 and 1 or 0",
				},
				InputAnimationStart5 = InstanceInput {
					SourceOp = "Merge5",
					Source = "AnimationStartManual",
					Name = "Animation Start",
					Default = 0,
				},
				InputAnimationTime5 = InstanceInput {
					SourceOp = "Merge5",
					Source = "AnimationTime",
					Default = 10,
				},
				InputOffset5 = InstanceInput {
					SourceOp = "Merge5",
					Source = "TextOffset",
					DefaultX = 0,
					DefaultY = 0,
				},
				InputHideCache3_5 = InstanceInput {
					SourceOp = "Options",
					Source = "HideCache3",
				},
				InputSeparateFont5 = InstanceInput {
					SourceOp = "Text5",
					Source = "SetFont",
				},
				InputHideFont5 = InstanceInput {
					SourceOp = "Text5",
					Source = "HideFont",
				},
				InputText5Font = InstanceInput {
					SourceOp = "Text_5",
					Source = "Font",
					ControlGroup = 7,
				},
				InputText5Style = InstanceInput {
					SourceOp = "Text_5",
					Source = "Style",
					ControlGroup = 7,
				},
				Input41 = InstanceInput {
					SourceOp = "Text5",
					Source = "FontSize",
					Name = "Size",
					MaxScale = 5,
					Default = 1,
				},
				InputAngle5 = InstanceInput {
					SourceOp = "Text5",
					Source = "AngleZ",
				},
				Input37 = InstanceInput {
					SourceOp = "Text5",
					Source = "FontColorRed",
					Name = "Color",
					ControlGroup = 20,
					Default = 0,
				},
				Input38 = InstanceInput {
					SourceOp = "Text5",
					Source = "FontColorGreen",
					ControlGroup = 20,
					Default = 0.9764705882353,
				},
				Input39 = InstanceInput {
					SourceOp = "Text5",
					Source = "FontColorBlue",
					ControlGroup = 20,
					Default = 0,
				},
				InputLabelWord6 = InstanceInput {
					SourceOp = "Options",
					Source = "LabelWord6",
					Expression = "WordSelection==5 and 1 or 0",
				},
				InputAnimationStart6 = InstanceInput {
					SourceOp = "Merge6",
					Source = "AnimationStartManual",
					Name = "Animation Start",
					Default = 0,
				},
				InputAnimationTime6 = InstanceInput {
					SourceOp = "Merge6",
					Source = "AnimationTime",
					Default = 10,
				},
				InputOffset6 = InstanceInput {
					SourceOp = "Merge6",
					Source = "TextOffset",
					DefaultX = 0,
					DefaultY = 0,
				},
				InputHideCache3_6 = InstanceInput {
					SourceOp = "Options",
					Source = "HideCache3",
				},
				InputSeparateFont6 = InstanceInput {
					SourceOp = "Text6",
					Source = "SetFont",
				},
				InputHideFont6 = InstanceInput {
					SourceOp = "Text6",
					Source = "HideFont",
				},
				InputText6Font = InstanceInput {
					SourceOp = "Text_6",
					Source = "Font",
					ControlGroup = 8,
				},
				InputText6Style = InstanceInput {
					SourceOp = "Text_6",
					Source = "Style",
					ControlGroup = 8,
				},
				Input49 = InstanceInput {
					SourceOp = "Text6",
					Source = "FontSize",
					Name = "Size",
					MaxScale = 5,
					Default = 1,
				},
				InputAngle6 = InstanceInput {
					SourceOp = "Text6",
					Source = "AngleZ",
				},
				Input45 = InstanceInput {
					SourceOp = "Text6",
					Source = "FontColorRed",
					Name = "Color",
					ControlGroup = 24,
					Default = 1,
				},
				Input46 = InstanceInput {
					SourceOp = "Text6",
					Source = "FontColorGreen",
					ControlGroup = 24,
					Default = 0.9882352941176,
				},
				Input47 = InstanceInput {
					SourceOp = "Text6",
					Source = "FontColorBlue",
					ControlGroup = 24,
					Default = 0.4745098039216,
				},
				InputHideCopyColor = InstanceInput {
					SourceOp = "Options",
					Source = "HideCache4",
				},
				InputCopyColor = InstanceInput {
					SourceOp = "Options",
					Source = "BtnCopyWordColor",
				},


				InputLabelAnimation = InstanceInput {
					SourceOp = "Options",
					Source = "LabelAnimation",
				},
				InputWriteOnAnimation = InstanceInput {
					SourceOp = "Options",
					Source = "AnimateWriteOn",
					Name = "Word Write On",
				},
				InputHideWriteOnSize = InstanceInput {
					SourceOp = "Options",
					Source = "HideWriteOnSize",
				},
				InputWriteOnSize = InstanceInput {
					SourceOp = "Options",
					Source = "WriteOnSize",
					Name = "Start Size",
					Default = 0,
				},
				InputWriteOnFadeIn = InstanceInput {
					SourceOp = "Options",
					Source = "AnimateWriteOnFadeIn",
					Name = "Fade In",
					Default = 0,
				},
				InputWriteOnCurve_W1 = InstanceInput {
					SourceOp = "AnimValueM1",
					Source = "EaseIn",
					Name = "Ease In/Out",
					Width = 0.5,
				},
				InputWriteOnCurve_W2 = InstanceInput {
					SourceOp = "AnimValueM1",
					Source = "EaseOut",
					Width = 0.5,
				},
				InputAnimBlank1 = InstanceInput {
					SourceOp = "Merge1",
					Source = "ApplyBlank1",
				},

				InputHideCache2 = InstanceInput {
					SourceOp = "Options",
					Source = "HideCache2",
				},

				InputCharWriteOn = InstanceInput {
					SourceOp = "Options",
					Source = "AnimateCharWriteOn",
				},
				InputHideCharWriteOn = InstanceInput {
					SourceOp = "Options",
					Source = "HideCharWriteOn",
				},
				InputWriteOnCurve_1 = InstanceInput {
					SourceOp = "AnimValueM1",
					Source = "EaseIn",
					Name = "Ease In/Out",
					Width = 0.5,
				},
				InputWriteOnCurve_2 = InstanceInput {
					SourceOp = "AnimValueM1",
					Source = "EaseOut",
					Width = 0.5,
				},
				InputAnimCharBlank1 = InstanceInput {
					SourceOp = "Merge1",
					Source = "ApplyBlank1",
				},

				InputAnimateSize = InstanceInput {
					SourceOp = "Options",
					Source = "AnimateSize",
					Name = "Pulse",
				},
				InputHideSizeFactor = InstanceInput {
					SourceOp = "Options",
					Source = "HideSizeFactor",
					Expression = "AnimateSize",
				},
				InputAnimateSizeFactor = InstanceInput {
					SourceOp = "Options",
					Source = "SizeFactor",
					Default = 0.2,
				},
				InputAnimBlank3 = InstanceInput {
					SourceOp = "Merge1",
					Source = "ApplyBlank1",
				},

				InputAnimateColor = InstanceInput {
					SourceOp = "Options",
					Source = "AnimateColor",
					Name = "Color",
				},
				InputHideColorStyle = InstanceInput {
					SourceOp = "Options",
					Source = "HideColorStyle",
				},
				InputColorTransitionMode  = InstanceInput {
					SourceOp = "Options",
					Source = "ColorTransitionMode",
				},
				InputAnimateColorRed = InstanceInput {
					SourceOp = "Background3",
					Source = "TopLeftRed",
					Name = "Color",
					ControlGroup = 65,
					Default = 0,
				},
				InputAnimateColorGreen = InstanceInput {
					SourceOp = "Background3",
					Source = "TopLeftGreen",
					ControlGroup = 65,
					Default = 0.5,
				},
				InputAnimateColorBlue = InstanceInput {
					SourceOp = "Background3",
					Source = "TopLeftBlue",
					ControlGroup = 65,
					Default = 1,
				},
				InputHideColorEaseCurves = InstanceInput {
					SourceOp = "Options",
					Source = "HideColorEaseCurve",
				},
				InputWriteOnCurve_C1 = InstanceInput {
					SourceOp = "AnimValueM1",
					Source = "EaseIn",
					Name = "Ease In/Out",
					Width = 0.5,
				},
				InputWriteOnCurve_C2 = InstanceInput {
					SourceOp = "AnimValueM1",
					Source = "EaseOut",
					Width = 0.5,
				},
				InputAnimBlank2 = InstanceInput {
					SourceOp = "Merge1",
					Source = "ApplyBlank1",
				},

				InputAnimateBackground = InstanceInput {
					SourceOp = "Options",
					Source = "AnimateBackground",
					Name = "Background",
				},
				InputHideBackground = InstanceInput {
					SourceOp = "Options",
					Source = "HideBackgroundColor",
					Expression = "AnimateBackground",
				},
				InputAnimateBGColorRound = InstanceInput {
					SourceOp = "Options",
					Source = "BGRoundCorner",
					Default = 0.1,
				},
				InputBGOffset = InstanceInput {
					SourceOp = "Text1",
					Source = "BackgroundOffset",
					Name = "Offset",
					DefaultX = 0,
					DefaultY = 0,
				},
				InputAnimateBGColorRed = InstanceInput {
					SourceOp = "Background1",
					Source = "TopLeftRed",
					Name = "Color",
					ControlGroup = 15,
					Default = 0,
				},
				InputAnimateBGColorGreen = InstanceInput {
					SourceOp = "Background1",
					Source = "TopLeftGreen",
					ControlGroup = 15,
					Default = 0.5,
				},
				InputAnimateBGColorBlue = InstanceInput {
					SourceOp = "Background1",
					Source = "TopLeftBlue",
					ControlGroup = 15,
					Default = 1,
				},

				InputHideCacheAnimButtons =  InstanceInput {
					SourceOp = "Options",
					Source = "HideCacheButtons",
				},
				InputBtnCacheEnableCharWriteOn  = InstanceInput {
					SourceOp = "Options",
					Source = "BtnCacheModeEnableCharWriteOn",
				},
				InputBtnCacheEnablePulse  = InstanceInput {
					SourceOp = "Options",
					Source = "BtnCacheModeEnablePulse",
				},
				InputBtnCacheEnableColor  = InstanceInput {
					SourceOp = "Options",
					Source = "BtnCacheModeEnableColor",
				},
				InputBtnCacheEnableBackground  = InstanceInput {
					SourceOp = "Options",
					Source = "BtnCacheModeEnableBackground",
				},
				InputBtnReverse  = InstanceInput {
					SourceOp = "Options",
					Source = "BtnReverseAnimation",
				},
			},
			Outputs = {
				MainOutput1 = InstanceOutput {
					SourceOp = "TransformLast",
					Source = "Output",
				}
			},
			ViewInfo = GroupInfo {
				Pos = { -165, 49.5 },
				Flags = {
					AllowPan = false,
					GridSnap = true,
					AutoSnap = true,
					RemoveRouters = true
				},
				Size = { 694.087, 298.891, 258.822, 24.2424 },
				Direction = "Horizontal",
				PipeStyle = "Direct",
				Scale = 1,
				Offset = { 0, 0 }
			},
			Tools = ordered() {
				Options = Background {
					CtrlWShown = false,
					Inputs = {
						GlobalOut = Input { Value = 149, },
						Width = Input { Value = 3840, },
						Height = Input { Value = 2160, },
						UseFrameFormatSettings = Input { Value = 1, },
						["Gamut.SLogVersion"] = Input { Value = FuID { "SLog2" }, },
						TopLeftAlpha = Input { Value = 0, },
						CaptionInput = Input { Value = "ESSENTIAL ACTIVE CAPTION", },
						HideSizeFactor = Input { Expression = "AnimateSize", },
						HideColorStyle = Input { Expression = "AnimateColor", },
						HideColorEaseCurve = Input { Expression = "ColorTransitionMode", },
						HideOutlineOptions = Input { Expression = "Text1.Enabled2", },
						HideBackgroundColor = Input { Expression = "AnimateBackground", },
						HideWriteOnSize = Input { Expression = "AnimateWriteOn", },
						HideCharWriteOn = Input { Expression = "AnimateCharWriteOn", },
						LabelWord1 = Input { Expression = "WordSelection==0 and 1 or 0", },
						LabelWord2 = Input { Expression = "WordSelection==1 and 1 or 0", },
						LabelWord3 = Input { Expression = "WordSelection==2 and 1 or 0", },
						LabelWord4 = Input { Expression = "WordSelection==3 and 1 or 0", },
						LabelWord5 = Input { Expression = "WordSelection==4 and 1 or 0", },
						LabelWord6 = Input { Expression = "WordSelection==5 and 1 or 0", },
						HideWord1 = Input { Expression = "WordSelection==0 and 1 or 0", },
						HideWord2 = Input { Expression = "WordSelection==1 and 1 or 0", },
						HideWord3 = Input { Expression = "WordSelection==2 and 1 or 0", },
						HideWord4 = Input { Expression = "WordSelection==3 and 1 or 0", },
						HideWord5 = Input { Expression = "WordSelection==4 and 1 or 0", },
						HideWord6 = Input { Expression = "WordSelection==5 and 1 or 0", },
						HideCache1 = Input { Expression = "1-CacheMode", },
						HideCache2 = Input { Expression = "1-CacheMode", },
						HideCache3 = Input { Expression = "1-CacheMode", },
						HideCache4 = Input { Expression = "1-CacheMode", },
						HideCache5 = Input { Expression = "CacheMode", },
						HideCacheResetInputs = Input { Expression = "CacheMode", },
						HideCacheButtons = Input { Expression = "CacheMode", },
						Word1 = Input { Value = "ESSENTIAL ACTIVE CAPTION", },
						ResetScript = Input { Value = "u=TIME_UNDEFINED o=Options c0=o.AnimateCharWriteOn[u] o.AnimateCharWriteOn=0 o.ResetSuccess=0 ti=o.CaptionInput[u]; t={Text1,Text2,Text3,Text4,Text5,Text6}; words={}; rows={}; for i=1,6 do t[i].StyledText='' o:SetInput('Word'..i, '') end i=1;j=1 rtl=o.IsTextRTL[u] for r in string.gmatch(ti, '[^\\r\\n]+') do if (o.AnimationLevel[u] == 1) then words[i]=r:match('^%s*(.-)%s*$');rows[i]=j;i=i+1; else tw={} for w in string.gmatch(r, '%S+') do table.insert(tw, w) end m=math.min(#tw, 7-i) for k=1,m do ri=iif(rtl==1,m-k+1,k) words[i]=tw[ri]; rows[i]=j; i=i+1; if (i>6) then break end end end j=j+1 if (i>6) then break end end rv=o.ReverseDisplay[u]; for x=1,i-1 do c=iif(rv==1,i-x,x) t[c].StyledText=words[x] o:SetInput('Word'..c, words[x]) end m={Merge1,Merge2,Merge3,Merge4,Merge5,Merge6}; if (i>1) then DropShadow1.Source:ConnectTo(m[i-1].Output) else DropShadow1.Source:ConnectTo(o.Output) end; o.WordCount=i-1; w=t[1].Width[u];h=t[1].Height[u]; rs={} ws={} r1=0 r2=0 lcr=Text1.HorizontalLeftCenterRight[u] for j=1,i-1 do c=iif(rv==1,i-j,j) if j==1 then t[c].Center={0.5,0.5} else p=iif(rv==1,c+1,c-1) r1=rows[j-1]; r2=rows[j] s=Text1.WordSpacing[u] ts=Text1.Size[u] cs=Text1.CharacterSpacing[u] ls=Text1.LineSpacing[u] dod=t[p].Output:GetDoD();dod2=t[c].Output:GetDoD(); x=iif(r2==r1,dod[3]/w+(dod2[3]-dod2[1])/w*(1+lcr)/2+(cs-1)/10+ts/10+(s-1)/100,0.5); y=iif(r2==r1,t[p].Center[u][2],t[p].Center[u][2]-(dod[4]-dod[2]+dod2[4]-dod2[2])/h/2-ls*ts/2); t[c].Center={x,y} end if (r2>r1) then table.insert(rs,ws) ws={} end  table.insert(ws,t[c]) end; table.insert(rs,ws) if (o.AnimationLevel[u]==0) then for idx,row in ipairs(rs) do d1=row[1].Output:GetDoD()[1]/w d2=row[#row].Output:GetDoD()[3]/w dn=(1-(d2-d1)*(1+lcr))/2 for _, word in ipairs(row) do x=word.Center[u][1] y=word.Center[u][2] word.Center={x+dn-d1,y} end end end comp:Execute(o.CacheModeScript[u]) o.AnimateCharWriteOn=c0 o.ResetSuccess=1" },
						ToggleBackgroundScript = Input { Value = "u=TIME_UNDEFINED t={Text_1,Text_2,Text_3,Text_4,Text_5,Text_6} b=Options.AnimateBackground[u] if b==1 then for i=1,6 do t[i].Enabled5=1 t[i].Level5=0 t[i].Opacity5:SetExpression('AnimValue'..i..'.Value') t[i].SizeX5:SetExpression('0.9+AnimValue' .. i .. '.Value/10') t[i].SizeY5:SetExpression('SizeX5') t1=comp:FindTool('Text'..i) t[i].Round5=t1.Round5[u] t[i].Red5=t1.Red5[u] t[i].Green5=t1.Green5[u] t[i].Blue5=t1.Blue5[u] t[i].Offset5=t1.Offset5[u] t[i].AngleX5=t1.AngleX5[u] t[i].AngleY5=t1.AngleY5[u] t[i].AngleZ5=t1.AngleZ5[u] end else for i=1,6 do if t[i].Enabled5[u]==0 then break end t[i].SizeX5:SetExpression(nil) t[i].SizeY5:SetExpression(nil) t[i].Opacity5:SetExpression(nil) t[i].Enabled5=0 end end Options.BtnCacheModeEnableBackground:SetAttrs({INPS_Name=iif(b==1,'[X] Background Animation','Background Animation')})" },
						ToggleColorScript = Input { Value = "u=TIME_UNDEFINED t={Text_1,Text_2,Text_3,Text_4,Text_5,Text_6} t1={Text1,Text2,Text3,Text4,Text5,Text6} b=Options.AnimateColor[u] if b==1 then if Options.ColorTransitionMode[u]==0 then for i=1,6 do t[i].Red1:SetExpression('Text'..i..'.FontColorRed+(Background3.TopLeftRed-Text'..i..'.FontColorRed)*Text'..i..'.AnimValue') t[i].Green1:SetExpression('Text'..i..'.FontColorGreen+(Background3.TopLeftGreen-Text'..i..'.FontColorGreen)*Text'..i..'.AnimValue') t[i].Blue1:SetExpression('Text'..i..'.FontColorBlue+(Background3.TopLeftBlue-Text'..i..'.FontColorBlue)*Text'..i..'.AnimValue') end else for i=1,6 do t[i].Red1:SetExpression('Background3.TopLeftRed+(Text'..i..'.FontColorRed-Background3.TopLeftRed)*Merge'..i..'.AnimValue') t[i].Green1:SetExpression('Background3.TopLeftGreen+(Text'..i..'.FontColorGreen-Background3.TopLeftGreen)*Merge'..i..'.AnimValue') t[i].Blue1:SetExpression('Background3.TopLeftBlue+(Text'..i..'.FontColorBlue-Background3.TopLeftBlue)*Merge'..i..'.AnimValue') end end else for i=1,6 do t[i].Red1:SetExpression(nil) t[i].Green1:SetExpression(nil) t[i].Blue1:SetExpression(nil) t[i].Red1=t1[i].FontColorRed[u] t[i].Green1=t1[i].FontColorGreen[u] t[i].Blue1=t1[i].FontColorBlue[u] end end Options.BtnCacheModeEnableColor:SetAttrs({INPS_Name=iif(b==1,'[X] Color Animation','Color Animation')})" },
						TogglePulseScript = Input { Value = "u=TIME_UNDEFINED t={Text_1,Text_2,Text_3,Text_4,Text_5,Text_6} b=Options.AnimateSize[u] if b==1 then for i=1,6 do t[i].LayoutSize:SetExpression('Text'..i..'.FontSize+Text'..i..'.AnimValue*Options.SizeFactor') end else for i=1,6 do t[i].LayoutSize:SetExpression(nil) t1=comp:FindTool('Text'..i) t[i].LayoutSize=t1.FontSize[u] end end Options.BtnCacheModeEnablePulse:SetAttrs({INPS_Name=iif(b==1,'[X] Pulse Animation','Pulse Animation')})" },
						CacheModeScript = Input { Value = "u=TIME_UNDEFINED cm=Options.CacheMode[u] t={Text1,Text2,Text3,Text4,Text5,Text6} tc={Text_1,Text_2,Text_3,Text_4,Text_5,Text_6} m={BC1,BC2,BC3,BC4,BC5,BC6} if cm==0 then for i=1,6 do m[i].Input:ConnectTo(t[i].Output) end else for i=1,6 do t1=t[i] t2=tc[i] t2.Center=t1.Center[u] t2.StyledText=t1.StyledText[u] if t1.SetFont[u]==0 then t2.Font=Text_0.Font[u] t2.Style=Text_0.Style[u] end t2.AngleZ=t1.AngleZ[u] t2.Size=t1.Size[u] t2.WordAngleX=t1.WordAngleX[u] t2.WordAngleY=t1.WordAngleY[u] t2.WordAngleZ=t1.WordAngleZ[u] t2.CharacterSpacingClone=t1.CharacterSpacingClone[u] t2.WordSpacing=t1.WordSpacing[u] t2.HorizontalLeftCenterRight=t1.HorizontalLeftCenterRight[u] t2.Enabled2=t1.Enabled2[u] if t1.Enabled2[u]==1 then t2.Thickness2=t1.Thickness2[u] t2.Red2=t1.Red2[u] t2.Green2=t1.Green2[u] t2.Blue2=t1.Blue2[u] t2.JoinStyle2=t1.JoinStyle2[u] end t2.Red1=t1.Red1[u] t2.Green1=t1.Green1[u] t2.Blue1=t1.Blue1[u] t2.LayoutSize=t1.LayoutSize[u] m[i].Input:ConnectTo(tc[i].Output) comp:Execute(Options.ToggleBackgroundScript[u]) comp:Execute(Options.ToggleColorScript[u]) comp:Execute(Options.TogglePulseScript[u]) comp:Execute(Options.ToggleCharWriteOnScript[u]) end end AnimValue1.Invert=0 AnimValue2.Invert=0 AnimValue3.Invert=0 AnimValue4.Invert=0 AnimValue5.Invert=0 AnimValue6.Invert=0 AnimValueM1.Invert=0 AnimValueM2.Invert=0 AnimValueM3.Invert=0 AnimValueM4.Invert=0 AnimValueM5.Invert=0 AnimValueM6.Invert=0" },
						ToggleCharWriteOnScript = Input { Value = "u=TIME_UNDEFINED t={Text_1,Text_2,Text_3,Text_4,Text_5,Text_6} b=Options.AnimateCharWriteOn[u] r=Options.ReverseDisplay[u] if b==1 then for i=1,6 do if r==1 then t[i].Start:SetExpression('1-AnimValueM'..i..'.Value') else t[i].End:SetExpression('AnimValueM'..i..'.Value') end end else for i=1,6 do if r==1 then t[i].Start:SetExpression(nil) t[i].Start=0 else t[i].End:SetExpression(nil) t[i].End=1 end end end Options.BtnCacheModeEnableCharWriteOn:SetAttrs({INPS_Name=iif(b==1,'[X] Character Write On','Character Write On')})" }
					},
					ViewInfo = OperatorInfo { Pos = { -55, 16.4996 } },
					UserControls = ordered() {
						CaptionInput = {
							TEC_ReadOnly = false,
							LINKID_DataType = "Text",
							TEC_Wrap = false,
							INPID_InputControl = "TextEditControl",
							TEC_Lines = 3,
							LINKS_Name = "Text Input",
						},
						ApplyStyles = {
							INP_Integer = false,
							INP_External = false,
							LINKID_DataType = "Number",
							BTNCS_Execute = "comp:Execute(Options.ResetScript[TIME_UNDEFINED])",
							INPID_InputControl = "ButtonControl",
							LINKS_Name = "Apply Styles",
						},
						BtnCalcTimeStart = {
							ICD_Width = 0.5,
							INP_Integer = false,
							INP_External = false,
							LINKID_DataType = "Number",
							BTNCS_Execute = "t={Merge1,Merge2,Merge3,Merge4,Merge5,Merge6};s=Options.WordSelection[TIME_UNDEFINED]+1;t[s].AnimationStartManual=comp.CurrentTime-comp:GetAttrs('COMPN_RenderStart');",
							INPID_InputControl = "ButtonControl",
							LINKS_Name = "Start Animation",
						},
						BtnCalcTimeEnd = {
							ICD_Width = 0.5,
							INP_Integer = false,
							INP_External = false,
							LINKID_DataType = "Number",
							BTNCS_Execute = "t={Merge1,Merge2,Merge3,Merge4,Merge5,Merge6};s=Options.WordSelection[TIME_UNDEFINED]+1; t[s].AnimationTime=math.max(0,comp.CurrentTime-t[s].AnimationStart[TIME_UNDEFINED]-comp:GetAttrs('COMPN_RenderStart'));",
							INPID_InputControl = "ButtonControl",
							LINKS_Name = "End Animation",
						},
						BtnCopyWordColor = {
							INP_Integer = false,
							INP_External = false,
							LINKID_DataType = "Number",
							BTNCS_Execute = "u=TIME_UNDEFINED t={Text1,Text2,Text3,Text4,Text5,Text6};s=Options.WordSelection[u]+1; for i=1,6 do if (i~=s) then t[i].FontColorRed=t[s].FontColorRed[u];t[i].FontColorGreen=t[s].FontColorGreen[u];t[i].FontColorBlue=t[s].FontColorBlue[u]; end end",
							INPID_InputControl = "ButtonControl",
							LINKS_Name = "Copy Color To All Words",
						},
						BtnCopyAnimationTime = {
							INP_Integer = false,
							INP_External = false,
							LINKID_DataType = "Number",
							BTNCS_Execute = "u=TIME_UNDEFINED t={Merge1,Merge2,Merge3,Merge4,Merge5,Merge6};s=Options.WordSelection[u]+1; for i=1,6 do if (i~=s) then t[i].AnimationTime=t[s].AnimationTime[u] end end",
							INPID_InputControl = "ButtonControl",
							LINKS_Name = "Set Animation Time for All Words",
						},
						BtnReverseAnimation = {
							INP_Integer = false,
							INP_External = false,
							LINKID_DataType = "Number",
							BTNCS_Execute = "u=TIME_UNDEFINED t={Text1, Text2, Text3, Text4, Text5, Text6} tt={Text_1,Text_2,Text_3,Text_4,Text_5,Text_6} rv=1-Options.ReverseDisplay[u] Options.ReverseDisplay=rv Options.BtnReverseAnimation:SetAttrs({INPS_Name=rv==1 and '[X] Reverse Animation' or 'Reverse Animation'}) wc=Options.WordCount[u] sav={} for i=1,wc do sav[i]={word=t[i].StyledText[u],center=t[i].Center[u]} end for i=1,wc do j=wc-i+1 t[i].StyledText=sav[j]['word'] t[i].Center=sav[j]['center'] tt[i].StyledText=sav[j]['word'] tt[i].Center=sav[j]['center'] Options:SetInput('Word'..i,sav[j]['word']) end",
							INPID_InputControl = "ButtonControl",
							LINKS_Name = "Reverse Animation",
						},
						BtnCacheMode = {
							INP_Integer = false,
							INP_External = false,
							LINKID_DataType = "Number",
							BTNCS_Execute = "Options.CacheMode=1 comp:Execute(Options.CacheModeScript[TIME_UNDEFINED])",
							INPID_InputControl = "ButtonControl",
							LINKS_Name = "Cache Mode",
						},
						BtnExitCacheMode = {
							INP_Integer = false,
							INP_External = false,
							LINKID_DataType = "Number",
							BTNCS_Execute = "Options.CacheMode=0 comp:Execute(Options.CacheModeScript[TIME_UNDEFINED])",
							INPID_InputControl = "ButtonControl",
							LINKS_Name = "[X] Cache Mode",
						},
						BtnCacheModeEnableBackground = {
							INP_Integer = false,
							INP_External = false,
							LINKID_DataType = "Number",
							BTNCS_Execute = "u=TIME_UNDEFINED Options.AnimateBackground=1-Options.AnimateBackground[u] comp:Execute(Options.ToggleBackgroundScript[u])",
							INPID_InputControl = "ButtonControl",
							LINKS_Name = "Background Animation",
						},
						BtnCacheModeEnableColor = {
							INP_Integer = false,
							INP_External = false,
							LINKID_DataType = "Number",
							BTNCS_Execute = "u=TIME_UNDEFINED Options.AnimateColor=1-Options.AnimateColor[u] comp:Execute(Options.ToggleColorScript[u])",
							INPID_InputControl = "ButtonControl",
							LINKS_Name = "Color Animation",
						},
						BtnCacheModeEnablePulse = {
							INP_Integer = false,
							INP_External = false,
							LINKID_DataType = "Number",
							BTNCS_Execute = "u=TIME_UNDEFINED Options.AnimateSize=1-Options.AnimateSize[u] comp:Execute(Options.TogglePulseScript[u])",
							INPID_InputControl = "ButtonControl",
							LINKS_Name = "Pulse Animation",
						},
						BtnCacheModeEnableCharWriteOn = {
							INP_Integer = false,
							INP_External = false,
							LINKID_DataType = "Number",
							BTNCS_Execute = "u=TIME_UNDEFINED Options.AnimateCharWriteOn=1-Options.AnimateCharWriteOn[u] comp:Execute(Options.ToggleCharWriteOnScript[u])",
							INPID_InputControl = "ButtonControl",
							LINKS_Name = "Character Write On",
						},
						WordSelection = {
							{ MBTNCD_ButtonWidth = 0.166, MBTNC_AddButton = "1" },
							{ MBTNC_AddButton = "2" },
							{ MBTNC_AddButton = "3" },
							{ MBTNC_AddButton = "4" },
							{ MBTNC_AddButton = "5" },
							{ MBTNC_AddButton = "6" },
							INP_MaxAllowed = 1000000,
							INP_Integer = false,
							INPID_InputControl = "MultiButtonControl",
							MBTNC_ShowBasicButton = true,
							INP_MaxScale = 1,
							INP_External = false,
							LINKID_DataType = "Number",
							INP_MinScale = 0,
							INP_MinAllowed = -1000000,
							MBTNC_ForceButtons = true,
							MBTNC_ShowName = false,
							MBTNC_StretchToFit = true,
							MBTNC_ShowToolTip = false,
							LINKS_Name = "Text Selection",
						},
						Word1 = {
							LINKS_Name = "Word1",
							LINKID_DataType = "Text",
							INPID_InputControl = "TextEditControl",
							TEC_Lines = 1,
							TEC_Wrap = false,
							TEC_ReadOnly = true,
							ICS_ControlPage = "Controls",
							INP_External = false,
						},
						Word2 = {
							LINKS_Name = "Word2",
							LINKID_DataType = "Text",
							INPID_InputControl = "TextEditControl",
							TEC_Lines = 1,
							TEC_Wrap = false,
							TEC_ReadOnly = true,
							ICS_ControlPage = "Controls",
							INP_External = false,
						},
						Word3 = {
							LINKS_Name = "Word3",
							LINKID_DataType = "Text",
							INPID_InputControl = "TextEditControl",
							TEC_Lines = 1,
							TEC_Wrap = false,
							TEC_ReadOnly = true,
							ICS_ControlPage = "Controls",
							INP_External = false,
						},
						Word4 = {
							LINKS_Name = "Word4",
							LINKID_DataType = "Text",
							INPID_InputControl = "TextEditControl",
							TEC_Lines = 1,
							TEC_Wrap = false,
							TEC_ReadOnly = true,
							ICS_ControlPage = "Controls",
							INP_External = false,
						},
						Word5 = {
							LINKS_Name = "Word5",
							LINKID_DataType = "Text",
							INPID_InputControl = "TextEditControl",
							TEC_Lines = 1,
							TEC_Wrap = false,
							TEC_ReadOnly = true,
							ICS_ControlPage = "Controls",
							INP_External = false,
						},
						Word6 = {
							LINKS_Name = "Word6",
							LINKID_DataType = "Text",
							INPID_InputControl = "TextEditControl",
							TEC_Lines = 1,
							TEC_Wrap = false,
							TEC_ReadOnly = true,
							ICS_ControlPage = "Controls",
							INP_External = false,
						},
						AnimationLevel = {
							{ MBTNC_AddButton = "Word" },
							{ MBTNC_AddButton = "Line" },
							INP_Integer = false,
							INPID_InputControl = "MultiButtonControl",
							MBTNC_ShowBasicButton = true,
							INP_External = false,
							INP_Default = 1,
							LINKID_DataType = "Number",
							MBTNC_ShowName = false,
							MBTNC_StretchToFit = true,
							MBTNC_ShowToolTip = false,
							LINKS_Name = "Animation Level",
						},

						IsTextRTL = {
							CBC_TriState = false,
							INP_Integer = false,
							INP_External = false,
							LINKID_DataType = "Number",
							INP_Default = 0,
							INPID_InputControl = "CheckboxControl",
							LINKS_Name = "Right to Left",
						},
						ReverseDisplay = {
							CBC_TriState = false,
							INP_Integer = false,
							INP_External = false,
							LINKID_DataType = "Number",
							INP_Default = 0,
							INPID_InputControl = "CheckboxControl",
							LINKS_Name = "Reverse Display"
						},
						AnimateWriteOn = {
							CBC_TriState = false,
							INP_Integer = false,
							INP_External = false,
							LINKID_DataType = "Number",
							INP_Default = 0,
							INPID_InputControl = "CheckboxControl",
							LINKS_Name = "Animate Write On"
						},
						AnimateCharWriteOn = {
							CBC_TriState = false,
							INP_Integer = false,
							INP_External = false,
							LINKID_DataType = "Number",
							INP_Default = 0,
							INPID_InputControl = "CheckboxControl",
							LINKS_Name = "Character Write On"
						},
						AnimateBackground = {
							CBC_TriState = false,
							INP_Integer = false,
							INP_External = false,
							LINKID_DataType = "Number",
							INP_Default = 0,
							INPID_InputControl = "CheckboxControl",
							LINKS_Name = "Animate Background"
						},
						AnimateSize = {
							CBC_TriState = false,
							INP_Integer = false,
							INP_External = false,
							LINKID_DataType = "Number",
							INP_Default = 0,
							INPID_InputControl = "CheckboxControl",
							LINKS_Name = "Animate Size"
						},
						AnimateColor = {
							CBC_TriState = false,
							INP_Integer = false,
							INP_External = false,
							LINKID_DataType = "Number",
							INP_Default = 0,
							INPID_InputControl = "CheckboxControl",
							LINKS_Name = "Animate Color"
						},
						CacheMode = {
							CBC_TriState = false,
							INP_Integer = false,
							INP_External = false,
							LINKID_DataType = "Number",
							INP_Default = 0,
							INPID_InputControl = "CheckboxControl",
							LINKS_Name = "Cache Mode"
						},
						ResetSuccess = {
							CBC_TriState = false,
							INP_Integer = false,
							INP_External = false,
							LINKID_DataType = "Number",
							INP_Default = 0,
							INPID_InputControl = "CheckboxControl",
							LINKS_Name = "Reset Success"
						},

						ColorTransitionMode = {
							{ MBTNC_AddButton = "Fill" },
							{ MBTNC_AddButton = "Transition" },
							INP_Integer = false,
							INPID_InputControl = "MultiButtonControl",
							MBTNC_ShowBasicButton = true,
							INP_External = false,
							INP_Default = 0,
							LINKID_DataType = "Number",
							MBTNC_ShowName = false,
							MBTNC_StretchToFit = true,
							MBTNC_ShowToolTip = false,
							LINKS_Name = "Mode",
						},
						AnimateWriteOnFadeIn = {
							{ MBTNC_AddButton = "No" },
							{ MBTNC_AddButton = "Yes" },
							INP_Integer = false,
							INPID_InputControl = "MultiButtonControl",
							MBTNC_ShowBasicButton = true,
							INP_External = false,
							INP_Default = 0,
							LINKID_DataType = "Number",
							MBTNC_ShowName = false,
							MBTNC_StretchToFit = true,
							MBTNC_ShowToolTip = false,
							LINKS_Name = "Fade In",
						},
						SizeFactor = {
							INP_MaxAllowed = 1,
							INP_Integer = false,
							INPID_InputControl = "SliderControl",
							INP_MaxScale = 1,
							INP_Default = 0.2,
							INP_MinScale = -1,
							INP_MinAllowed = -1,
							LINKID_DataType = "Number",
							INP_External = false,
							LINKS_Name = "Size Factor",
						},
						WriteOnSize = {
							INP_MaxAllowed = 100,
							INP_Integer = false,
							INPID_InputControl = "SliderControl",
							INP_MaxScale = 10,
							INP_Default = 0,
							INP_MinScale = 0,
							INP_MinAllowed = 0,
							LINKID_DataType = "Number",
							INP_External = false,
							LINKS_Name = "WriteOn Size",
						},
						OutlineThickness = {
							INP_MaxAllowed = 1,
							INP_Integer = false,
							INPID_InputControl = "SliderControl",
							INP_MaxScale = 0.2,
							INP_Default = 0.05,
							INP_MinScale = 0,
							INP_MinAllowed = 0,
							LINKID_DataType = "Number",
							INP_External = false,
							LINKS_Name = "Outline Thickness",
						},
						BGRoundCorner = {
							INP_MaxAllowed = 1,
							INP_Integer = false,
							INPID_InputControl = "SliderControl",
							INP_MaxScale = 1,
							INP_Default = 0.1,
							INP_MinScale = 0,
							INP_MinAllowed = 0,
							LINKID_DataType = "Number",
							INP_External = false,
							LINKS_Name = "Round Corner",
						},
						WordCount = {
							INP_MaxAllowed = 10,
							INP_Integer = true,
							INP_MinAllowed = 0,
							LINKID_DataType = "Number",
							INPID_InputControl = "SliderControl",
							INP_MinScale = 0,
							INP_MaxScale = 10,
							INP_Default = 1,
							LINKS_Name = "Word Count",
						},
						LabelAnimation = {
							INP_Integer = false,
							LBLC_DropDownButton = true,
							LINKID_DataType = "Number",
							LBLC_NumInputs = 40,
							INP_Default = 1,
							INPID_InputControl = "LabelControl",
							LINKS_Name = "Animation",
						},
						LabelOtherControls = {
							INP_Integer = false,
							LBLC_DropDownButton = true,
							LINKID_DataType = "Number",
							LBLC_NumInputs = 13,
							INP_Default = 0,
							INPID_InputControl = "LabelControl",
							LINKS_Name = "Direction - Shadow - Rotation - Outline",
						},
						HideOutlineOptions = {
							LBLC_NumInputs = 5,
							IC_Visible = false,
							LBLC_DropDownButton = true,
							INPID_InputControl = "LabelControl",
						},
						HideWriteOnSize = {
							LBLC_NumInputs = 5,
							IC_Visible = false,
							LBLC_DropDownButton = true,
							INPID_InputControl = "LabelControl",
						},
						HideSizeFactor = {
							LBLC_NumInputs = 2,
							IC_Visible = false,
							LBLC_DropDownButton = true,
							INPID_InputControl = "LabelControl",
						},
						HideColorStyle = {
							LBLC_NumInputs = 8,
							IC_Visible = false,
							LBLC_DropDownButton = true,
							INPID_InputControl = "LabelControl",
						},
						HideColorEaseCurve = {
							LBLC_NumInputs = 2,
							IC_Visible = false,
							LBLC_DropDownButton = true,
							INPID_InputControl = "LabelControl",
						},
						HideBackgroundColor = {
							LBLC_NumInputs = 5,
							IC_Visible = false,
							LBLC_DropDownButton = true,
							INPID_InputControl = "LabelControl",
						},
						HideCharWriteOn = {
							LBLC_NumInputs = 3,
							IC_Visible = false,
							LBLC_DropDownButton = true,
							INPID_InputControl = "LabelControl",
						},
						LabelWord1 = {
							LBLC_NumInputs = 13,
							IC_Visible = false,
							LBLC_DropDownButton = true,
							INPID_InputControl = "LabelControl",
						},
						LabelWord2 = {
							LBLC_NumInputs = 13,
							IC_Visible = false,
							LBLC_DropDownButton = true,
							INPID_InputControl = "LabelControl",
						},
						LabelWord3 = {
							LBLC_NumInputs = 13,
							IC_Visible = false,
							LBLC_DropDownButton = true,
							INPID_InputControl = "LabelControl",
						},
						LabelWord4 = {
							LBLC_NumInputs = 13,
							IC_Visible = false,
							LBLC_DropDownButton = true,
							INPID_InputControl = "LabelControl",
						},
						LabelWord5 = {
							LBLC_NumInputs = 13,
							IC_Visible = false,
							LBLC_DropDownButton = true,
							INPID_InputControl = "LabelControl",
						},
						LabelWord6 = {
							LBLC_NumInputs = 13,
							IC_Visible = false,
							LBLC_DropDownButton = true,
							INPID_InputControl = "LabelControl",
						},
						HideWord1 = {
							LBLC_NumInputs = 1,
							IC_Visible = false,
							LBLC_DropDownButton = true,
							INPID_InputControl = "LabelControl",
						},
						HideWord2 = {
							LBLC_NumInputs = 1,
							IC_Visible = false,
							LBLC_DropDownButton = true,
							INPID_InputControl = "LabelControl",
						},
						HideWord3 = {
							LBLC_NumInputs = 1,
							IC_Visible = false,
							LBLC_DropDownButton = true,
							INPID_InputControl = "LabelControl",
						},
						HideWord4 = {
							LBLC_NumInputs = 1,
							IC_Visible = false,
							LBLC_DropDownButton = true,
							INPID_InputControl = "LabelControl",
						},
						HideWord5 = {
							LBLC_NumInputs = 1,
							IC_Visible = false,
							LBLC_DropDownButton = true,
							INPID_InputControl = "LabelControl",
						},
						HideWord6 = {
							LBLC_NumInputs = 1,
							IC_Visible = false,
							LBLC_DropDownButton = true,
							INPID_InputControl = "LabelControl",
						},
						HideCache1 = {
							LBLC_NumInputs = 25,
							IC_Visible = false,
							LBLC_DropDownButton = true,
							INPID_InputControl = "LabelControl",
						},
						HideCache2 = {
							LBLC_NumInputs = 26,
							IC_Visible = false,
							LBLC_DropDownButton = true,
							INPID_InputControl = "LabelControl",
						},
						HideCache3 = {
							LBLC_NumInputs = 9,
							IC_Visible = false,
							LBLC_DropDownButton = true,
							INPID_InputControl = "LabelControl",
						},
						HideCache4 = {
							LBLC_NumInputs = 1,
							IC_Visible = false,
							LBLC_DropDownButton = true,
							INPID_InputControl = "LabelControl",
						},
						HideCacheResetInputs = {
							LBLC_NumInputs = 8,
							IC_Visible = false,
							LBLC_DropDownButton = true,
							INPID_InputControl = "LabelControl",
						},
						HideCacheButtons = {
							LBLC_NumInputs = 4,
							IC_Visible = false,
							LBLC_DropDownButton = true,
							INPID_InputControl = "LabelControl",
						},
					}
				},
				Text1 = TextPlus {
					CtrlWShown = false,
					Inputs = {
						Softness3 = Input { Value = 1, },
						Opacity3 = Input { Value = 0.5, },
						SoftnessY3 = Input { Value = 3, },
						SoftnessX3 = Input { Value = 3, },
						GlobalOut = Input { Value = 149, },
						Width = Input { Value = 3840, },
						Height = Input { Value = 2160, },
						UseFrameFormatSettings = Input { Value = 1, },
						["Gamut.SLogVersion"] = Input { Value = FuID { "SLog2" }, },
						Center = Input { Value = { 0.5, 0.5 }, },
						LayoutSize = Input { Expression = "FontSize+Options.AnimateSize*AnimValue*Options.SizeFactor", },
						Start = Input { Expression = "Options.ReverseDisplay==0 and 0 or Options.AnimateCharWriteOn-Options.AnimateCharWriteOn*AnimValueM1.Value", },
						End = Input { Expression = "Options.ReverseDisplay==1 and 1 or (1-Options.AnimateCharWriteOn+Options.AnimateCharWriteOn*AnimValueM1.Value)", },
						LayoutRotation = Input { Value = 1, },
						SelectTransform = Input { Value = 1, },
						TransformRotation = Input { Value = 1, },
						SelectElement = Input { Value = 1, },
						Select = Input { Value = 1, },
						Enabled2 = Input { Value = 1, },
						Enabled5 = Input { Value = 1, },
						Red1 = Input { Expression = ":c1=FontColorRed if Options.AnimateColor==0 then return c1 end c2=Background3.TopLeftRed v=AnimValue if Options.ColorTransitionMode==1 then c2=FontColorRed c1=Background3.TopLeftRed v=AnimValueM1.Value end return c1+(c2-c1)*v", },
						Green1 = Input { Expression = ":c1=FontColorGreen if Options.AnimateColor==0 then return c1 end c2=Background3.TopLeftGreen v=AnimValue if Options.ColorTransitionMode==1 then c2=FontColorGreen c1=Background3.TopLeftGreen v=AnimValueM1.Value end return c1+(c2-c1)*v", },
						Blue1 = Input { Expression = ":c1=FontColorBlue if Options.AnimateColor==0 then return c1 end c2=Background3.TopLeftBlue v=AnimValue if Options.ColorTransitionMode==1 then c2=FontColorBlue c1=Background3.TopLeftBlue v=AnimValueM1.Value end return c1+(c2-c1)*v", },
						Softness1 = Input { Value = 1, },
						Thickness2 = Input { Value = 0.05, },
						Red2 = Input { Value = 0, },
						Green2 = Input { Value = 0, },
						Blue2 = Input { Value = 0, },
						Softness2 = Input { Value = 1, },
						StyledText = Input { Value = "ESSENTIAL ACTIVE CAPTION", },
						Font = Input { Expression = "SetFont==1 and Text_1.Font or Text_0.Font", },
						Style = Input { Expression = "SetFont==1 and Text_1.Style or Text_0.Style", },
						Size = Input { Value = 0.05, },
						WordSpacing = Input { Value = 1.5 },
						VerticalJustificationNew = Input { Value = 3, },
						HorizontalLeftCenterRight = Input { Value = 0, },
						HorizontalJustificationNew = Input { Value = 3, },
						Opacity5 = Input { 
							Expression = "Options.AnimateBackground*AnimValue", 
						},
						ElementShape5 = Input { Value = 2, },
						Level5 = Input { Value = 0, },
						Round5 = Input { Value = 0.1, Expression = "Options.BGRoundCorner", },
						Red5 = Input { Expression = "Background1.TopLeftRed", },
						Green5 = Input { Expression = "Background1.TopLeftGreen", },
						Blue5 = Input { Expression = "Background1.TopLeftBlue", },
						Offset5 = Input { Expression = "BackgroundOffset", },
						AngleX5 = Input { Expression = "WordAngleX", },
						AngleY5 = Input { Expression = "WordAngleY", },
						AngleZ5 = Input { Expression = "WordAngleZ", },
						Size5 = Input { Value = 1, },
						SizeX5 = Input { Value = 0.9, Expression = "0.9+AnimValue/10" },
						SizeY5 = Input { Value = 0.9, Expression = "SizeX5"	},
						HideFont = Input { Expression = "SetFont" },
						AnimValue = Input {
							SourceOp = "AnimValue1",
							Source = "Value",
						},
					},
					ViewInfo = OperatorInfo { Pos = { -165, 49.4996 } },
					UserControls = ordered() {
						AnimValue = {
							INP_Integer = false,
							INPID_InputControl = "SliderControl",
							INP_MaxScale = 1,
							INP_MinScale = 0,
							LINKID_DataType = "Number",
							LINKS_Name = "Animation Value",
						},
						SetFont = {
							CBC_TriState = false,
							INP_Integer = false,
							INP_External = false,
							LINKID_DataType = "Number",
							INP_Default = 0,
							INPID_InputControl = "CheckboxControl",
							LINKS_Name = "Font & Style",
						},
						FontSize = {
							INP_MinScale = 0,
							INP_Integer = false,
							INP_MinAllowed = 0,
							INPID_InputControl = "SliderControl",
							LINKID_DataType = "Number",
							INP_MaxScale = 5,
							INP_Default = 1,
							LINKS_Name = "Font Size",
						},
						FontColorRed = {
							LINKS_Name = "FontColorRed",
							LINKID_DataType = "Number",
							INPID_InputControl = "ColorControl",
							INP_Integer = false,
							INP_Default = 1,
							IC_ControlGroup = 15,
							IC_ControlID = 0,
							CLRC_ColorSpace = "HSV",
							CLRC_ShowWheel = false,
							INP_External = false,
						},
						FontColorGreen = {
							LINKS_Name = "FontColorGreen",
							LINKID_DataType = "Number",
							INPID_InputControl = "ColorControl",
							INP_Integer = false,
							INP_Default = 1,
							IC_ControlGroup = 15,
							IC_ControlID = 1,
							CLRC_ColorSpace = "HSV",
							CLRC_ShowWheel = false,
							INP_External = false,
						},
						FontColorBlue = {
							LINKS_Name = "FontColorBlue",
							LINKID_DataType = "Number",
							INPID_InputControl = "ColorControl",
							INP_Integer = false,
							INP_Default = 1,
							IC_ControlGroup = 15,
							IC_ControlID = 2,
							CLRC_ColorSpace = "HSV",
							CLRC_ShowWheel = false,
							INP_External = false,
						},
						AngleZ = {
							INP_MaxAllowed = 1000000,
							INP_Integer = false,
							INPID_InputControl = "ScrewControl",
							IC_Steps = 3601,
							INP_MaxScale = 360,
							INP_Default = 0,
							INPID_PreviewControl = "None",
							INP_MinAllowed = -1000000,
							LINKID_DataType = "Number",
							INP_MinScale = 0,
							LINKS_Name = "Angle",
						},
						BackgroundOffset = {
							LINKS_Name = "Background Offset",
							LINKID_DataType = "Point",
							INPID_InputControl = "OffsetControl",
							INP_DefaultX = 0,
							INP_DefaultY = 0,
							INP_External = false,
						},
						HideFont = {
							LBLC_NumInputs = 2,
							IC_Visible = false,
							LBLC_DropDownButton = true,
							INPID_InputControl = "LabelControl",
						},
					}
				},
				Text2 = TextPlus {
					CtrlWShown = false,
					SourceOp = "Text1",
					Inputs = {
						Center = Input { 
							Value = { 0.5, 0.42037037037037 }, 
						},
						LayoutSize = Input { Expression = "FontSize+Options.AnimateSize*AnimValue*Options.SizeFactor" },
						Start = Input { Expression = "Options.ReverseDisplay==0 and 0 or Options.AnimateCharWriteOn-Options.AnimateCharWriteOn*AnimValueM2.Value", },
						End = Input { Expression = "Options.ReverseDisplay==1 and 1 or (1-Options.AnimateCharWriteOn+Options.AnimateCharWriteOn*AnimValueM2.Value)", },
						Red1 = Input { Expression = ":c1=FontColorRed if Options.AnimateColor==0 then return c1 end c2=Background3.TopLeftRed v=AnimValue if Options.ColorTransitionMode==1 then c2=FontColorRed c1=Background3.TopLeftRed v=AnimValueM2.Value end return c1+(c2-c1)*v", },
						Green1 = Input { Expression = ":c1=FontColorGreen if Options.AnimateColor==0 then return c1 end c2=Background3.TopLeftGreen v=AnimValue if Options.ColorTransitionMode==1 then c2=FontColorGreen c1=Background3.TopLeftGreen v=AnimValueM2.Value end return c1+(c2-c1)*v", },
						Blue1 = Input { Expression = ":c1=FontColorBlue if Options.AnimateColor==0 then return c1 end c2=Background3.TopLeftBlue v=AnimValue if Options.ColorTransitionMode==1 then c2=FontColorBlue c1=Background3.TopLeftBlue v=AnimValueM2.Value end return c1+(c2-c1)*v", },
						TextText = Input { },
						StyledText = Input { },
						Font = Input { Expression = "SetFont==1 and Text_2.Font or Text_0.Font", },
						Style = Input { Expression = "SetFont==1 and Text_2.Style or Text_0.Style", },
						AngleZ = Input { },
						SetFont = Input { },
						FontSize = Input { },
						Opacity5 = Input {
							Expression = "Options.AnimateBackground*AnimValue", 
						},
						SizeX5 = Input { Value = 0.9, Expression = "0.9+AnimValue/10" },
						SizeY5 = Input { Value = 0.9, Expression = "SizeX5"	},
						HideFont = Input { Expression = "SetFont" },
						FontColorRed = Input { Value = 0, },
						FontColorGreen = Input { Value = 1, },
						FontColorBlue = Input { Value = 0, },
						AnimValue = Input {
							SourceOp = "AnimValue2",
							Source = "Value",
						},
					},
					ViewInfo = OperatorInfo { Pos = { -165, 82.4996 } },
					UserControls = ordered() {
						AnimValue = {
							INP_Integer = false,
							INPID_InputControl = "SliderControl",
							INP_MaxScale = 1,
							INP_MinScale = 0,
							LINKID_DataType = "Number",
							LINKS_Name = "Animation Value",
						},
						SetFont = {
							CBC_TriState = false,
							INP_Integer = false,
							INP_External = false,
							LINKID_DataType = "Number",
							INP_Default = 0,
							INPID_InputControl = "CheckboxControl",
							LINKS_Name = "Font & Style",
						},
						FontSize = {
							INP_MinScale = 0,
							INP_Integer = false,
							INP_MinAllowed = 0,
							INPID_InputControl = "SliderControl",
							LINKID_DataType = "Number",
							INP_MaxScale = 5,
							INP_Default = 1,
							LINKS_Name = "Font Size",
						},
						FontColorRed = {
							LINKS_Name = "FontColorRed",
							LINKID_DataType = "Number",
							INPID_InputControl = "ColorControl",
							INP_Integer = false,
							INP_Default = 1,
							IC_ControlGroup = 15,
							IC_ControlID = 0,
							CLRC_ColorSpace = "HSV",
							CLRC_ShowWheel = false,
							INP_External = false,
						},
						FontColorGreen = {
							LINKS_Name = "FontColorGreen",
							LINKID_DataType = "Number",
							INPID_InputControl = "ColorControl",
							INP_Integer = false,
							INP_Default = 1,
							IC_ControlGroup = 15,
							IC_ControlID = 1,
							CLRC_ColorSpace = "HSV",
							CLRC_ShowWheel = false,
							INP_External = false,
						},
						FontColorBlue = {
							LINKS_Name = "FontColorBlue",
							LINKID_DataType = "Number",
							INPID_InputControl = "ColorControl",
							INP_Integer = false,
							INP_Default = 1,
							IC_ControlGroup = 15,
							IC_ControlID = 2,
							CLRC_ColorSpace = "HSV",
							CLRC_ShowWheel = false,
							INP_External = false,
						},
						AngleZ = {
							INP_MaxAllowed = 1000000,
							INP_Integer = false,
							INPID_InputControl = "ScrewControl",
							IC_Steps = 3601,
							INP_MaxScale = 360,
							INP_Default = 0,
							INPID_PreviewControl = "None",
							INP_MinAllowed = -1000000,
							LINKID_DataType = "Number",
							INP_MinScale = 0,
							LINKS_Name = "Angle",
						},
						HideFont = {
							LBLC_NumInputs = 2,
							IC_Visible = false,
							LBLC_DropDownButton = true,
							INPID_InputControl = "LabelControl",
						},
					}
				},
				Text4 = TextPlus {
					CtrlWShown = false,
					NameSet = true,
					SourceOp = "Text1",
					Inputs = {
						Center = Input {
							Value = { 0.5, 0.265740740740741 },
						},
						LayoutSize = Input { Expression = "FontSize+Options.AnimateSize*AnimValue*Options.SizeFactor" },
						Start = Input { Expression = "Options.ReverseDisplay==0 and 0 or Options.AnimateCharWriteOn-Options.AnimateCharWriteOn*AnimValueM4.Value", },
						End = Input { Expression = "Options.ReverseDisplay==1 and 1 or (1-Options.AnimateCharWriteOn+Options.AnimateCharWriteOn*AnimValueM4.Value)", },
						Red1 = Input { Expression = ":c1=FontColorRed if Options.AnimateColor==0 then return c1 end c2=Background3.TopLeftRed v=AnimValue if Options.ColorTransitionMode==1 then c2=FontColorRed c1=Background3.TopLeftRed v=AnimValueM4.Value end return c1+(c2-c1)*v", },
						Green1 = Input { Expression = ":c1=FontColorGreen if Options.AnimateColor==0 then return c1 end c2=Background3.TopLeftGreen v=AnimValue if Options.ColorTransitionMode==1 then c2=FontColorGreen c1=Background3.TopLeftGreen v=AnimValueM4.Value end return c1+(c2-c1)*v", },
						Blue1 = Input { Expression = ":c1=FontColorBlue if Options.AnimateColor==0 then return c1 end c2=Background3.TopLeftBlue v=AnimValue if Options.ColorTransitionMode==1 then c2=FontColorBlue c1=Background3.TopLeftBlue v=AnimValueM4.Value end return c1+(c2-c1)*v", },
						TextText = Input { },
						StyledText = Input { },
						Font = Input { Expression = "SetFont==1 and Text_4.Font or Text_0.Font", },
						Style = Input { Expression = "SetFont==1 and Text_4.Style or Text_0.Style", },
						AngleZ = Input { },
						SetFont = Input { },
						FontSize = Input { },
						Opacity5 = Input {
							Expression = "Options.AnimateBackground*AnimValue", 
						},
						SizeX5 = Input { Value = 0.9, Expression = "0.9+AnimValue/10" },
						SizeY5 = Input { Value = 0.9, Expression = "SizeX5"	},
						HideFont = Input { Expression = "SetFont" },
						FontColorRed = Input { Value = 0, },
						FontColorGreen = Input { },
						FontColorBlue = Input { },
						AnimValue = Input {
							SourceOp = "AnimValue4",
							Source = "Value",
						},
					},
					ViewInfo = OperatorInfo { Pos = { -165, 148.5 } },
					UserControls = ordered() {
						AnimValue = {
							INP_Integer = false,
							INPID_InputControl = "SliderControl",
							INP_MaxScale = 1,
							INP_MinScale = 0,
							LINKID_DataType = "Number",
							LINKS_Name = "Animation Value",
						},
						SetFont = {
							CBC_TriState = false,
							INP_Integer = false,
							INP_External = false,
							LINKID_DataType = "Number",
							INP_Default = 0,
							INPID_InputControl = "CheckboxControl",
							LINKS_Name = "Font & Style",
						},
						FontSize = {
							INP_MinScale = 0,
							INP_Integer = false,
							INP_MinAllowed = 0,
							INPID_InputControl = "SliderControl",
							LINKID_DataType = "Number",
							INP_MaxScale = 5,
							INP_Default = 1,
							LINKS_Name = "Font Size",
						},
						FontColorRed = {
							LINKS_Name = "FontColorRed",
							LINKID_DataType = "Number",
							INPID_InputControl = "ColorControl",
							INP_Integer = false,
							INP_Default = 1,
							IC_ControlGroup = 15,
							IC_ControlID = 0,
							CLRC_ColorSpace = "HSV",
							CLRC_ShowWheel = false,
							INP_External = false,
						},
						FontColorGreen = {
							LINKS_Name = "FontColorGreen",
							LINKID_DataType = "Number",
							INPID_InputControl = "ColorControl",
							INP_Integer = false,
							INP_Default = 1,
							IC_ControlGroup = 15,
							IC_ControlID = 1,
							CLRC_ColorSpace = "HSV",
							CLRC_ShowWheel = false,
							INP_External = false,
						},
						FontColorBlue = {
							LINKS_Name = "FontColorBlue",
							LINKID_DataType = "Number",
							INPID_InputControl = "ColorControl",
							INP_Integer = false,
							INP_Default = 1,
							IC_ControlGroup = 15,
							IC_ControlID = 2,
							CLRC_ColorSpace = "HSV",
							CLRC_ShowWheel = false,
							INP_External = false,
						},
						AngleZ = {
							INP_MaxAllowed = 1000000,
							INP_Integer = false,
							INPID_InputControl = "ScrewControl",
							IC_Steps = 3601,
							INP_MaxScale = 360,
							INP_Default = 0,
							INPID_PreviewControl = "None",
							INP_MinAllowed = -1000000,
							LINKID_DataType = "Number",
							INP_MinScale = 0,
							LINKS_Name = "Angle",
						},
						HideFont = {
							LBLC_NumInputs = 2,
							IC_Visible = false,
							LBLC_DropDownButton = true,
							INPID_InputControl = "LabelControl",
						},
					}
				},
				Text3 = TextPlus {
					CtrlWShown = false,
					NameSet = true,
					SourceOp = "Text1",
					Inputs = {
						Center = Input { 
							Value = { 0.5, 0.343055555555556 }, 
						},
						LayoutSize = Input { Expression = "FontSize+Options.AnimateSize*AnimValue*Options.SizeFactor" },
						Start = Input { Expression = "Options.ReverseDisplay==0 and 0 or Options.AnimateCharWriteOn-Options.AnimateCharWriteOn*AnimValueM3.Value", },
						End = Input { Expression = "Options.ReverseDisplay==1 and 1 or (1-Options.AnimateCharWriteOn+Options.AnimateCharWriteOn*AnimValueM3.Value)", },
						Red1 = Input { Expression = ":c1=FontColorRed if Options.AnimateColor==0 then return c1 end c2=Background3.TopLeftRed v=AnimValue if Options.ColorTransitionMode==1 then c2=FontColorRed c1=Background3.TopLeftRed v=AnimValueM3.Value end return c1+(c2-c1)*v", },
						Green1 = Input { Expression = ":c1=FontColorGreen if Options.AnimateColor==0 then return c1 end c2=Background3.TopLeftGreen v=AnimValue if Options.ColorTransitionMode==1 then c2=FontColorGreen c1=Background3.TopLeftGreen v=AnimValueM3.Value end return c1+(c2-c1)*v", },
						Blue1 = Input { Expression = ":c1=FontColorBlue if Options.AnimateColor==0 then return c1 end c2=Background3.TopLeftBlue v=AnimValue if Options.ColorTransitionMode==1 then c2=FontColorBlue c1=Background3.TopLeftBlue v=AnimValueM3.Value end return c1+(c2-c1)*v", },
						TextText = Input { },
						StyledText = Input { },
						Font = Input { Expression = "SetFont==1 and Text_3.Font or Text_0.Font", },
						Style = Input { Expression = "SetFont==1 and Text_3.Style or Text_0.Style", },
						AngleZ = Input { },
						SetFont = Input { },
						FontSize = Input { },
						Opacity5 = Input {
							Expression = "Options.AnimateBackground*AnimValue", 
						},
						SizeX5 = Input { Value = 0.9, Expression = "0.9+AnimValue/10" },
						SizeY5 = Input { Value = 0.9, Expression = "SizeX5"	},
						HideFont = Input { Expression = "SetFont" },
						FontColorRed = Input { },
						FontColorGreen = Input { },
						FontColorBlue = Input { Value = 0, },
						AnimValue = Input {
							SourceOp = "AnimValue3",
							Source = "Value",
						},
					},
					ViewInfo = OperatorInfo { Pos = { -165, 115.5 } },
					UserControls = ordered() {
						AnimValue = {
							INP_Integer = false,
							INPID_InputControl = "SliderControl",
							INP_MaxScale = 1,
							INP_MinScale = 0,
							LINKID_DataType = "Number",
							LINKS_Name = "Animation Value",
						},
						SetFont = {
							CBC_TriState = false,
							INP_Integer = false,
							INP_External = false,
							LINKID_DataType = "Number",
							INP_Default = 0,
							INPID_InputControl = "CheckboxControl",
							LINKS_Name = "Font & Style",
						},
						FontSize = {
							INP_MinScale = 0,
							INP_Integer = false,
							INP_MinAllowed = 0,
							INPID_InputControl = "SliderControl",
							LINKID_DataType = "Number",
							INP_MaxScale = 5,
							INP_Default = 1,
							LINKS_Name = "Font Size",
						},
						FontColorRed = {
							LINKS_Name = "FontColorRed",
							LINKID_DataType = "Number",
							INPID_InputControl = "ColorControl",
							INP_Integer = false,
							INP_Default = 1,
							IC_ControlGroup = 15,
							IC_ControlID = 0,
							CLRC_ColorSpace = "HSV",
							CLRC_ShowWheel = false,
							INP_External = false,
						},
						FontColorGreen = {
							LINKS_Name = "FontColorGreen",
							LINKID_DataType = "Number",
							INPID_InputControl = "ColorControl",
							INP_Integer = false,
							INP_Default = 1,
							IC_ControlGroup = 15,
							IC_ControlID = 1,
							CLRC_ColorSpace = "HSV",
							CLRC_ShowWheel = false,
							INP_External = false,
						},
						FontColorBlue = {
							LINKS_Name = "FontColorBlue",
							LINKID_DataType = "Number",
							INPID_InputControl = "ColorControl",
							INP_Integer = false,
							INP_Default = 1,
							IC_ControlGroup = 15,
							IC_ControlID = 2,
							CLRC_ColorSpace = "HSV",
							CLRC_ShowWheel = false,
							INP_External = false,
						},
						AngleZ = {
							INP_MaxAllowed = 1000000,
							INP_Integer = false,
							INPID_InputControl = "ScrewControl",
							IC_Steps = 3601,
							INP_MaxScale = 360,
							INP_Default = 0,
							INPID_PreviewControl = "None",
							INP_MinAllowed = -1000000,
							LINKID_DataType = "Number",
							INP_MinScale = 0,
							LINKS_Name = "Angle",
						},
						HideFont = {
							LBLC_NumInputs = 2,
							IC_Visible = false,
							LBLC_DropDownButton = true,
							INPID_InputControl = "LabelControl",
						},
					}
				},
				Text5 = TextPlus {
					CtrlWShown = false,
					NameSet = true,
					SourceOp = "Text1",
					Inputs = {
						Center = Input {
							Value = { 0.5, 0.188425925925926 },
						},
						LayoutSize = Input { Expression = "FontSize+Options.AnimateSize*AnimValue*Options.SizeFactor" },
						Start = Input { Expression = "Options.ReverseDisplay==0 and 0 or Options.AnimateCharWriteOn-Options.AnimateCharWriteOn*AnimValueM5.Value", },
						End = Input { Expression = "Options.ReverseDisplay==1 and 1 or (1-Options.AnimateCharWriteOn+Options.AnimateCharWriteOn*AnimValueM5.Value)", },
						Red1 = Input { Expression = ":c1=FontColorRed if Options.AnimateColor==0 then return c1 end c2=Background3.TopLeftRed v=AnimValue if Options.ColorTransitionMode==1 then c2=FontColorRed c1=Background3.TopLeftRed v=AnimValueM5.Value end return c1+(c2-c1)*v", },
						Green1 = Input { Expression = ":c1=FontColorGreen if Options.AnimateColor==0 then return c1 end c2=Background3.TopLeftGreen v=AnimValue if Options.ColorTransitionMode==1 then c2=FontColorGreen c1=Background3.TopLeftGreen v=AnimValueM5.Value end return c1+(c2-c1)*v", },
						Blue1 = Input { Expression = ":c1=FontColorBlue if Options.AnimateColor==0 then return c1 end c2=Background3.TopLeftBlue v=AnimValue if Options.ColorTransitionMode==1 then c2=FontColorBlue c1=Background3.TopLeftBlue v=AnimValueM5.Value end return c1+(c2-c1)*v", },
						TextText = Input { },
						StyledText = Input { },
						Font = Input { Expression = "SetFont==1 and Text_5.Font or Text_0.Font", },
						Style = Input { Expression = "SetFont==1 and Text_5.Style or Text_0.Style", },
						AngleZ = Input { },
						SetFont = Input { },
						FontSize = Input { },
						Opacity5 = Input {
							Expression = "Options.AnimateBackground*AnimValue", 
						},
						SizeX5 = Input { Value = 0.9, Expression = "0.9+AnimValue/10" },
						SizeY5 = Input { Value = 0.9, Expression = "SizeX5"	},
						HideFont = Input { Expression = "SetFont" },
						FontColorRed = Input { },
						FontColorGreen = Input { Value = 0.6, },
						FontColorBlue = Input { Value = 0, },
						AnimValue = Input {
							SourceOp = "AnimValue5",
							Source = "Value",
						},
					},
					ViewInfo = OperatorInfo { Pos = { -165, 181.5 } },
					UserControls = ordered() {
						AnimValue = {
							INP_Integer = false,
							INPID_InputControl = "SliderControl",
							INP_MaxScale = 1,
							INP_MinScale = 0,
							LINKID_DataType = "Number",
							LINKS_Name = "Animation Value",
						},
						SetFont = {
							CBC_TriState = false,
							INP_Integer = false,
							INP_External = false,
							LINKID_DataType = "Number",
							INP_Default = 0,
							INPID_InputControl = "CheckboxControl",
							LINKS_Name = "Font & Style",
						},
						FontSize = {
							INP_MinScale = 0,
							INP_Integer = false,
							INP_MinAllowed = 0,
							INPID_InputControl = "SliderControl",
							LINKID_DataType = "Number",
							INP_MaxScale = 5,
							INP_Default = 1,
							LINKS_Name = "Font Size",
						},
						FontColorRed = {
							LINKS_Name = "FontColorRed",
							LINKID_DataType = "Number",
							INPID_InputControl = "ColorControl",
							INP_Integer = false,
							INP_Default = 1,
							IC_ControlGroup = 15,
							IC_ControlID = 0,
							CLRC_ColorSpace = "HSV",
							CLRC_ShowWheel = false,
							INP_External = false,
						},
						FontColorGreen = {
							LINKS_Name = "FontColorGreen",
							LINKID_DataType = "Number",
							INPID_InputControl = "ColorControl",
							INP_Integer = false,
							INP_Default = 1,
							IC_ControlGroup = 15,
							IC_ControlID = 1,
							CLRC_ColorSpace = "HSV",
							CLRC_ShowWheel = false,
							INP_External = false,
						},
						FontColorBlue = {
							LINKS_Name = "FontColorBlue",
							LINKID_DataType = "Number",
							INPID_InputControl = "ColorControl",
							INP_Integer = false,
							INP_Default = 1,
							IC_ControlGroup = 15,
							IC_ControlID = 2,
							CLRC_ColorSpace = "HSV",
							CLRC_ShowWheel = false,
							INP_External = false,
						},
						AngleZ = {
							INP_MaxAllowed = 1000000,
							INP_Integer = false,
							INPID_InputControl = "ScrewControl",
							IC_Steps = 3601,
							INP_MaxScale = 360,
							INP_Default = 0,
							INPID_PreviewControl = "None",
							INP_MinAllowed = -1000000,
							LINKID_DataType = "Number",
							INP_MinScale = 0,
							LINKS_Name = "Angle",
						},
						HideFont = {
							LBLC_NumInputs = 2,
							IC_Visible = false,
							LBLC_DropDownButton = true,
							INPID_InputControl = "LabelControl",
						},
					}
				},
				Text6 = TextPlus {
					CtrlWShown = false,
					NameSet = true,
					SourceOp = "Text1",
					Inputs = {
						Center = Input {
							Value = { 0.5, 0.109722222222222 },
						},
						LayoutSize = Input { Expression = "FontSize+Options.AnimateSize*AnimValue*Options.SizeFactor" },
						Start = Input { Expression = "Options.ReverseDisplay==0 and 0 or Options.AnimateCharWriteOn-Options.AnimateCharWriteOn*AnimValueM6.Value", },
						End = Input { Expression = "Options.ReverseDisplay==1 and 1 or (1-Options.AnimateCharWriteOn+Options.AnimateCharWriteOn*AnimValueM6.Value)", },
						Red1 = Input { Expression = ":c1=FontColorRed if Options.AnimateColor==0 then return c1 end c2=Background3.TopLeftRed v=AnimValue if Options.ColorTransitionMode==1 then c2=FontColorRed c1=Background3.TopLeftRed v=AnimValueM6.Value end return c1+(c2-c1)*v", },
						Green1 = Input { Expression = ":c1=FontColorGreen if Options.AnimateColor==0 then return c1 end c2=Background3.TopLeftGreen v=AnimValue if Options.ColorTransitionMode==1 then c2=FontColorGreen c1=Background3.TopLeftGreen v=AnimValueM6.Value end return c1+(c2-c1)*v", },
						Blue1 = Input { Expression = ":c1=FontColorBlue if Options.AnimateColor==0 then return c1 end c2=Background3.TopLeftBlue v=AnimValue if Options.ColorTransitionMode==1 then c2=FontColorBlue c1=Background3.TopLeftBlue v=AnimValueM6.Value end return c1+(c2-c1)*v", },
						TextText = Input { },
						StyledText = Input { },
						Font = Input { Expression = "SetFont==1 and Text_6.Font or Text_0.Font", },
						Style = Input { Expression = "SetFont==1 and Text_6.Style or Text_0.Style", },
						AngleZ = Input { },
						SetFont = Input { },
						FontSize = Input { },
						Opacity5 = Input { 
							Expression = "Options.AnimateBackground*AnimValue", 
						},
						SizeX5 = Input { Value = 0.9, Expression = "0.9+AnimValue/10" },
						SizeY5 = Input { Value = 0.9, Expression = "SizeX5"	},
						HideFont = Input { Expression = "SetFont" },
						FontColorRed = Input { Value = 1, },
						FontColorGreen = Input { Value = 0.5, },
						FontColorBlue = Input { Value = 1, },
						AnimValue = Input {
							SourceOp = "AnimValue6",
							Source = "Value",
						},
					},
					ViewInfo = OperatorInfo { Pos = { -165, 214.5 } },
					UserControls = ordered() {
						AnimValue = {
							INP_Integer = false,
							INPID_InputControl = "SliderControl",
							INP_MaxScale = 1,
							INP_MinScale = 0,
							LINKID_DataType = "Number",
							LINKS_Name = "Animation Value",
						},
						SetFont = {
							CBC_TriState = false,
							INP_Integer = false,
							INP_External = false,
							LINKID_DataType = "Number",
							INP_Default = 0,
							INPID_InputControl = "CheckboxControl",
							LINKS_Name = "Font & Style",
						},
						FontSize = {
							INP_MinScale = 0,
							INP_Integer = false,
							INP_MinAllowed = 0,
							INPID_InputControl = "SliderControl",
							LINKID_DataType = "Number",
							INP_MaxScale = 5,
							INP_Default = 1,
							LINKS_Name = "Font Size",
						},
						FontColorRed = {
							LINKS_Name = "FontColorRed",
							LINKID_DataType = "Number",
							INPID_InputControl = "ColorControl",
							INP_Integer = false,
							INP_Default = 1,
							IC_ControlGroup = 15,
							IC_ControlID = 0,
							CLRC_ColorSpace = "HSV",
							CLRC_ShowWheel = false,
							INP_External = false,
						},
						FontColorGreen = {
							LINKS_Name = "FontColorGreen",
							LINKID_DataType = "Number",
							INPID_InputControl = "ColorControl",
							INP_Integer = false,
							INP_Default = 1,
							IC_ControlGroup = 15,
							IC_ControlID = 1,
							CLRC_ColorSpace = "HSV",
							CLRC_ShowWheel = false,
							INP_External = false,
						},
						FontColorBlue = {
							LINKS_Name = "FontColorBlue",
							LINKID_DataType = "Number",
							INPID_InputControl = "ColorControl",
							INP_Integer = false,
							INP_Default = 1,
							IC_ControlGroup = 15,
							IC_ControlID = 2,
							CLRC_ColorSpace = "HSV",
							CLRC_ShowWheel = false,
							INP_External = false,
						},
						AngleZ = {
							INP_MaxAllowed = 1000000,
							INP_Integer = false,
							INPID_InputControl = "ScrewControl",
							IC_Steps = 3601,
							INP_MaxScale = 360,
							INP_Default = 0,
							INPID_PreviewControl = "None",
							INP_MinAllowed = -1000000,
							LINKID_DataType = "Number",
							INP_MinScale = 0,
							LINKS_Name = "Angle",
						},
						HideFont = {
							LBLC_NumInputs = 2,
							IC_Visible = false,
							LBLC_DropDownButton = true,
							INPID_InputControl = "LabelControl",
						},
					}
				},
				Merge1 = Merge {
					CtrlWShown = false,
					NameSet = true,
					Inputs = {
						Blend = Input {
							Expression = "(1-Options.AnimateWriteOn)+Options.AnimateWriteOn*iif(Options.AnimateWriteOnFadeIn==0,ceil(AnimValue),AnimValue)",
						},
						Background = Input {
							SourceOp = "Options",
							Source = "Output",
						},
						Foreground = Input {
							SourceOp = "BC1",
							Source = "Output",
						},
						Center = Input { Expression = "Point(0.5,0.5)+TextOffset", },
						Size = Input { Expression = "1-Options.AnimateWriteOn+Options.AnimateWriteOn*(Options.WriteOnSize+(1-Options.WriteOnSize)*AnimValue)", },
						PerformDepthMerge = Input { Value = 0, },
						AnimationStart = Input { Expression = "max(AnimationStartManual,0)", },
						AnimValue = Input {
							SourceOp = "AnimValueM1",
							Source = "Value",
						},
					},
					ViewInfo = OperatorInfo { Pos = { 55, 49.4996 } },
					UserControls = ordered() {
						TextOffset = {
							INP_DefaultX = 0,
							INP_DefaultY = 0,
							LINKID_DataType = "Point",
							INP_External = false,
							INPID_InputControl = "OffsetControl",
							LINKS_Name = "Word Offset",
						},
						AnimationStart = {
							INP_MinScale = 0,
							INP_Integer = true,
							INP_MinAllowed = 0,
							INPID_InputControl = "SliderControl",
							LINKID_DataType = "Number",
							INP_MaxScale = 300,
							LINKS_Name = "Animation Start",
						},
						AnimationStartManual = {
							INP_Integer = true,
							INPID_InputControl = "SliderControl",
							INP_MaxScale = 300,
							INP_Default = 0,
							INP_MinScale = 0,
							INP_MinAllowed = 0,
							LINKID_DataType = "Number",
							INP_External = false,
							LINKS_Name = "Animation Start Manual",
						},
						AnimationTime = {
							INP_MaxAllowed = 300,
							INP_Integer = true,
							INPID_InputControl = "SliderControl",
							INP_MaxScale = 60,
							INP_Default = 10,
							INP_MinScale = 0,
							INP_MinAllowed = 0,
							LINKID_DataType = "Number",
							INP_External = false,
							LINKS_Name = "Animation Time",
						},
						AnimValue = {
							INP_Integer = false,
							INPID_InputControl = "SliderControl",
							INP_MaxScale = 1,
							INP_MinScale = 0,
							LINKID_DataType = "Number",
							LINKS_Name = "Animation Value",
						},
					}
				},
				Merge2 = Merge {
					CtrlWShown = false,
					NameSet = true,
					Inputs = {
						Blend = Input {
							Expression = "(1-Options.AnimateWriteOn)+Options.AnimateWriteOn*iif(Options.AnimateWriteOnFadeIn==0,ceil(AnimValue),AnimValue)",
						},
						Background = Input {
							SourceOp = "Merge1",
							Source = "Output",
						},
						Foreground = Input {
							SourceOp = "BC2",
							Source = "Output",
						},
						Center = Input { Expression = "Point(0.5,0.5)+TextOffset", },
						Size = Input { Expression = "1-Options.AnimateWriteOn+Options.AnimateWriteOn*(Options.WriteOnSize+(1-Options.WriteOnSize)*AnimValue)", },
						PerformDepthMerge = Input { Value = 0, },
						AnimationStart = Input { Expression = "iif(AnimationStartManual>0,AnimationStartManual,Merge1.AnimationStart+Merge1.AnimationTime)", },
						AnimValue = Input {
							SourceOp = "AnimValueM2",
							Source = "Value",
						},
					},
					ViewInfo = OperatorInfo { Pos = { 55, 82.4996 } },
					UserControls = ordered() {
						TextOffset = {
							INP_DefaultX = 0,
							INP_DefaultY = 0,
							LINKID_DataType = "Point",
							INP_External = false,
							INPID_InputControl = "OffsetControl",
							LINKS_Name = "Word Offset",
						},
						AnimationStart = {
							INP_MinScale = 0,
							INP_Integer = true,
							INP_MinAllowed = 0,
							INPID_InputControl = "SliderControl",
							LINKID_DataType = "Number",
							INP_MaxScale = 300,
							LINKS_Name = "Animation Start",
						},
						AnimationStartManual = {
							INP_Integer = true,
							INPID_InputControl = "SliderControl",
							INP_MaxScale = 300,
							INP_Default = 0,
							INP_MinScale = 0,
							INP_MinAllowed = 0,
							LINKID_DataType = "Number",
							INP_External = false,
							LINKS_Name = "Animation Start Manual",
						},
						AnimationTime = {
							INP_MaxAllowed = 300,
							INP_Integer = true,
							INPID_InputControl = "SliderControl",
							INP_MaxScale = 60,
							INP_Default = 10,
							INP_MinScale = 0,
							INP_MinAllowed = 0,
							LINKID_DataType = "Number",
							INP_External = false,
							LINKS_Name = "Animation Time",
						},
						AnimValue = {
							INP_Integer = false,
							INPID_InputControl = "SliderControl",
							INP_MaxScale = 1,
							INP_MinScale = 0,
							LINKID_DataType = "Number",
							LINKS_Name = "Animation Value",
						},
					}
				},
				Merge3 = Merge {
					CtrlWShown = false,
					NameSet = true,
					Inputs = {
						Blend = Input {
							Expression = "(1-Options.AnimateWriteOn)+Options.AnimateWriteOn*iif(Options.AnimateWriteOnFadeIn==0,ceil(AnimValue),AnimValue)",
						},
						Background = Input {
							SourceOp = "Merge2",
							Source = "Output",
						},
						Foreground = Input {
							SourceOp = "BC3",
							Source = "Output",
						},
						Center = Input { Expression = "Point(0.5,0.5)+TextOffset", },
						Size = Input { Expression = "1-Options.AnimateWriteOn+Options.AnimateWriteOn*(Options.WriteOnSize+(1-Options.WriteOnSize)*AnimValue)", },
						PerformDepthMerge = Input { Value = 0, },
						AnimationStart = Input { Expression = "iif(AnimationStartManual>0,AnimationStartManual,Merge2.AnimationStart+Merge2.AnimationTime)", },
						AnimValue = Input {
							SourceOp = "AnimValueM3",
							Source = "Value",
						},
					},
					ViewInfo = OperatorInfo { Pos = { 55, 115.5 } },
					UserControls = ordered() {
						TextOffset = {
							INP_DefaultX = 0,
							INP_DefaultY = 0,
							LINKID_DataType = "Point",
							INP_External = false,
							INPID_InputControl = "OffsetControl",
							LINKS_Name = "Word Offset",
						},
						AnimationStart = {
							INP_MinScale = 0,
							INP_Integer = true,
							INP_MinAllowed = 0,
							INPID_InputControl = "SliderControl",
							LINKID_DataType = "Number",
							INP_MaxScale = 300,
							LINKS_Name = "Animation Start",
						},
						AnimationStartManual = {
							INP_Integer = true,
							INPID_InputControl = "SliderControl",
							INP_MaxScale = 300,
							INP_Default = 0,
							INP_MinScale = 0,
							INP_MinAllowed = 0,
							LINKID_DataType = "Number",
							INP_External = false,
							LINKS_Name = "Animation Start Manual",
						},
						AnimationTime = {
							INP_MaxAllowed = 300,
							INP_Integer = true,
							INPID_InputControl = "SliderControl",
							INP_MaxScale = 60,
							INP_Default = 10,
							INP_MinScale = 0,
							INP_MinAllowed = 0,
							LINKID_DataType = "Number",
							INP_External = false,
							LINKS_Name = "Animation Time",
						},
						AnimValue = {
							INP_Integer = false,
							INPID_InputControl = "SliderControl",
							INP_MaxScale = 1,
							INP_MinScale = 0,
							LINKID_DataType = "Number",
							LINKS_Name = "Animation Value",
						},
					}
				},
				Merge4 = Merge {
					CtrlWShown = false,
					NameSet = true,
					Inputs = {
						Blend = Input {
							Expression = "(1-Options.AnimateWriteOn)+Options.AnimateWriteOn*iif(Options.AnimateWriteOnFadeIn==0,ceil(AnimValue),AnimValue)",
						},
						Background = Input {
							SourceOp = "Merge3",
							Source = "Output",
						},
						Foreground = Input {
							SourceOp = "BC4",
							Source = "Output",
						},
						Center = Input { Expression = "Point(0.5,0.5)+TextOffset", },
						Size = Input { Expression = "1-Options.AnimateWriteOn+Options.AnimateWriteOn*(Options.WriteOnSize+(1-Options.WriteOnSize)*AnimValue)", },
						PerformDepthMerge = Input { Value = 0, },
						AnimationStart = Input { Expression = "iif(AnimationStartManual>0,AnimationStartManual,Merge3.AnimationStart+Merge3.AnimationTime)" },
						AnimValue = Input {
							SourceOp = "AnimValueM4",
							Source = "Value",
						},
					},
					ViewInfo = OperatorInfo { Pos = { 55, 148.5 } },
					UserControls = ordered() {
						TextOffset = {
							INP_DefaultX = 0,
							INP_DefaultY = 0,
							LINKID_DataType = "Point",
							INP_External = false,
							INPID_InputControl = "OffsetControl",
							LINKS_Name = "Word Offset",
						},
						AnimationStart = {
							INP_MinScale = 0,
							INP_Integer = true,
							INP_MinAllowed = 0,
							INPID_InputControl = "SliderControl",
							LINKID_DataType = "Number",
							INP_MaxScale = 300,
							LINKS_Name = "Animation Start",
						},
						AnimationStartManual = {
							INP_Integer = true,
							INPID_InputControl = "SliderControl",
							INP_MaxScale = 300,
							INP_Default = 0,
							INP_MinScale = 0,
							INP_MinAllowed = 0,
							LINKID_DataType = "Number",
							INP_External = false,
							LINKS_Name = "Animation Start Manual",
						},
						AnimationTime = {
							INP_MaxAllowed = 300,
							INP_Integer = true,
							INPID_InputControl = "SliderControl",
							INP_MaxScale = 60,
							INP_Default = 10,
							INP_MinScale = 0,
							INP_MinAllowed = 0,
							LINKID_DataType = "Number",
							INP_External = false,
							LINKS_Name = "Animation Time",
						},
						AnimValue = {
							INP_Integer = false,
							INPID_InputControl = "SliderControl",
							INP_MaxScale = 1,
							INP_MinScale = 0,
							LINKID_DataType = "Number",
							LINKS_Name = "Animation Value",
						},
					}
				},
				Merge5 = Merge {
					CtrlWShown = false,
					NameSet = true,
					Inputs = {
						Blend = Input {
							Expression = "(1-Options.AnimateWriteOn)+Options.AnimateWriteOn*iif(Options.AnimateWriteOnFadeIn==0,ceil(AnimValue),AnimValue)",
						},
						Background = Input {
							SourceOp = "Merge4",
							Source = "Output",
						},
						Foreground = Input {
							SourceOp = "BC5",
							Source = "Output",
						},
						Center = Input { Expression = "Point(0.5,0.5)+TextOffset", },
						Size = Input { Expression = "1-Options.AnimateWriteOn+Options.AnimateWriteOn*(Options.WriteOnSize+(1-Options.WriteOnSize)*AnimValue)", },
						PerformDepthMerge = Input { Value = 0, },
						AnimationStart = Input { Expression = "iif(AnimationStartManual>0,AnimationStartManual,Merge4.AnimationStart+Merge4.AnimationTime)" },
						AnimValue = Input {
							SourceOp = "AnimValueM5",
							Source = "Value",
						},
					},
					ViewInfo = OperatorInfo { Pos = { 55, 181.5 } },
					UserControls = ordered() {
						TextOffset = {
							INP_DefaultX = 0,
							INP_DefaultY = 0,
							LINKID_DataType = "Point",
							INP_External = false,
							INPID_InputControl = "OffsetControl",
							LINKS_Name = "Word Offset",
						},
						AnimationStart = {
							INP_MinScale = 0,
							INP_Integer = true,
							INP_MinAllowed = 0,
							INPID_InputControl = "SliderControl",
							LINKID_DataType = "Number",
							INP_MaxScale = 300,
							LINKS_Name = "Animation Start",
						},
						AnimationStartManual = {
							INP_Integer = true,
							INPID_InputControl = "SliderControl",
							INP_MaxScale = 300,
							INP_Default = 0,
							INP_MinScale = 0,
							INP_MinAllowed = 0,
							LINKID_DataType = "Number",
							INP_External = false,
							LINKS_Name = "Animation Start Manual",
						},
						AnimationTime = {
							INP_MaxAllowed = 300,
							INP_Integer = true,
							INPID_InputControl = "SliderControl",
							INP_MaxScale = 60,
							INP_Default = 10,
							INP_MinScale = 0,
							INP_MinAllowed = 0,
							LINKID_DataType = "Number",
							INP_External = false,
							LINKS_Name = "Animation Time",
						},
						AnimValue = {
							INP_Integer = false,
							INPID_InputControl = "SliderControl",
							INP_MaxScale = 1,
							INP_MinScale = 0,
							LINKID_DataType = "Number",
							LINKS_Name = "Animation Value",
						},
					}
				},
				Merge6 = Merge {
					NameSet = true,
					Inputs = {
						Blend = Input {
							Expression = "(1-Options.AnimateWriteOn)+Options.AnimateWriteOn*iif(Options.AnimateWriteOnFadeIn==0,ceil(AnimValue),AnimValue)",
						},
						Background = Input {
							SourceOp = "Merge5",
							Source = "Output",
						},
						Foreground = Input {
							SourceOp = "BC6",
							Source = "Output",
						},
						Center = Input { Expression = "Point(0.5,0.5)+TextOffset", },
						Size = Input { Expression = "1-Options.AnimateWriteOn+Options.AnimateWriteOn*(Options.WriteOnSize+(1-Options.WriteOnSize)*AnimValue)", },
						PerformDepthMerge = Input { Value = 0, },
						AnimationStart = Input { Expression = "iif(AnimationStartManual>0,AnimationStartManual,Merge5.AnimationStart+Merge5.AnimationTime)" },
						AnimValue = Input {
							SourceOp = "AnimValueM6",
							Source = "Value",
						},
					},
					ViewInfo = OperatorInfo { Pos = { 55, 214.5 } },
					UserControls = ordered() {
						TextOffset = {
							INP_DefaultX = 0,
							INP_DefaultY = 0,
							LINKID_DataType = "Point",
							INP_External = false,
							INPID_InputControl = "OffsetControl",
							LINKS_Name = "Word Offset",
						},
						AnimationStart = {
							INP_MinScale = 0,
							INP_Integer = true,
							INP_MinAllowed = 0,
							INPID_InputControl = "SliderControl",
							LINKID_DataType = "Number",
							INP_MaxScale = 300,
							LINKS_Name = "Animation Start",
						},
						AnimationStartManual = {
							INP_Integer = true,
							INPID_InputControl = "SliderControl",
							INP_MaxScale = 300,
							INP_Default = 0,
							INP_MinScale = 0,
							INP_MinAllowed = 0,
							LINKID_DataType = "Number",
							INP_External = false,
							LINKS_Name = "Animation Start Manual",
						},
						AnimationTime = {
							INP_MaxAllowed = 300,
							INP_Integer = true,
							INPID_InputControl = "SliderControl",
							INP_MaxScale = 60,
							INP_Default = 10,
							INP_MinScale = 0,
							INP_MinAllowed = 0,
							LINKID_DataType = "Number",
							INP_External = false,
							LINKS_Name = "Animation Time",
						},
						AnimValue = {
							INP_Integer = false,
							INPID_InputControl = "SliderControl",
							INP_MaxScale = 1,
							INP_MinScale = 0,
							LINKID_DataType = "Number",
							LINKS_Name = "Animation Value",
						},
					}
				},
				AnimValueM1 = LUTLookup {
					CtrlWZoom = false,
					NameSet = true,
					Inputs = {
						Source = Input { Value = FuID { "Duration" }, },
						Curve = Input { Value = FuID { "Easing" }, },
						EaseOut = Input { Value = FuID { "Expo" }, },
						Lookup = Input {
							SourceOp = "AnimCurvesLookupM",
							Source = "Value",
						},
						TimeScale = Input { Expression = "Merge1.AnimationTime==0 and 0 or (comp.RenderEnd-comp.RenderStart+1)/Merge1.AnimationTime", },
						TimeOffset = Input { Expression = "Merge1.AnimationStart/(comp.RenderEnd-comp.RenderStart+1)", },
					},
				},
				AnimCurvesLookupM = LUTBezier {
					KeyColorSplines = {
						[0] = {
							[0] = { 0, RH = { 0.333333333333333, 0.333333333333333 }, Flags = { Linear = true } },
							[1] = { 1, LH = { 0.666666666666667, 0.666666666666667 }, Flags = { Linear = true } }
						}
					},
					SplineColor = { Red = 255, Green = 255, Blue = 255 },
					NameSet = true,
				},
				AnimValueM2 = LUTLookup {
					CtrlWZoom = false,
					NameSet = true,
					Inputs = {
						Source = Input { Value = FuID { "Duration" }, },
						Curve = Input { Value = FuID { "Easing" }, },
						EaseIn = Input { Expression = "AnimValueM1.EaseIn", },
						EaseOut = Input { Expression = "AnimValueM1.EaseOut", },
						Lookup = Input {
							SourceOp = "AnimCurvesLookupM",
							Source = "Value",
						},
						TimeScale = Input { Expression = "Merge2.AnimationTime==0 and 0 or (comp.RenderEnd-comp.RenderStart+1)/Merge2.AnimationTime", },
						TimeOffset = Input { Expression = "Merge2.AnimationStart/(comp.RenderEnd-comp.RenderStart+1)", },
					},
				},
				AnimValueM3 = LUTLookup {
					CtrlWZoom = false,
					NameSet = true,
					Inputs = {
						Source = Input { Value = FuID { "Duration" }, },
						Curve = Input { Value = FuID { "Easing" }, },
						EaseIn = Input { Expression = "AnimValueM1.EaseIn", },
						EaseOut = Input { Expression = "AnimValueM1.EaseOut", },
						Lookup = Input {
							SourceOp = "AnimCurvesLookupM",
							Source = "Value",
						},
						TimeScale = Input { Expression = "Merge3.AnimationTime==0 and 0 or (comp.RenderEnd-comp.RenderStart+1)/Merge3.AnimationTime", },
						TimeOffset = Input { Expression = "Merge3.AnimationStart/(comp.RenderEnd-comp.RenderStart+1)", },
					},
				},
				AnimValueM4 = LUTLookup {
					CtrlWZoom = false,
					NameSet = true,
					Inputs = {
						Source = Input { Value = FuID { "Duration" }, },
						Curve = Input { Value = FuID { "Easing" }, },
						EaseIn = Input { Expression = "AnimValueM1.EaseIn", },
						EaseOut = Input { Expression = "AnimValueM1.EaseOut", },
						Lookup = Input {
							SourceOp = "AnimCurvesLookupM",
							Source = "Value",
						},
						TimeScale = Input { Expression = "Merge4.AnimationTime==0 and 0 or (comp.RenderEnd-comp.RenderStart+1)/Merge4.AnimationTime", },
						TimeOffset = Input { Expression = "Merge4.AnimationStart/(comp.RenderEnd-comp.RenderStart+1)", },
					},
				},
				AnimValueM5 = LUTLookup {
					CtrlWZoom = false,
					NameSet = true,
					Inputs = {
						Source = Input { Value = FuID { "Duration" }, },
						Curve = Input { Value = FuID { "Easing" }, },
						EaseIn = Input { Expression = "AnimValueM1.EaseIn", },
						EaseOut = Input { Expression = "AnimValueM1.EaseOut", },
						Lookup = Input {
							SourceOp = "AnimCurvesLookupM",
							Source = "Value",
						},
						TimeScale = Input { Expression = "Merge5.AnimationTime==0 and 0 or (comp.RenderEnd-comp.RenderStart+1)/Merge5.AnimationTime", },
						TimeOffset = Input { Expression = "Merge5.AnimationStart/(comp.RenderEnd-comp.RenderStart+1)", },
					},
				},
				AnimValueM6 = LUTLookup {
					CtrlWZoom = false,
					NameSet = true,
					Inputs = {
						Source = Input { Value = FuID { "Duration" }, },
						Curve = Input { Value = FuID { "Easing" }, },
						EaseIn = Input { Expression = "AnimValueM1.EaseIn", },
						EaseOut = Input { Expression = "AnimValueM1.EaseOut", },
						Lookup = Input {
							SourceOp = "AnimCurvesLookupM",
							Source = "Value",
						},
						TimeScale = Input { Expression = "Merge6.AnimationTime==0 and 0 or (comp.RenderEnd-comp.RenderStart+1)/Merge6.AnimationTime", },
						TimeOffset = Input { Expression = "Merge6.AnimationStart/(comp.RenderEnd-comp.RenderStart+1)", },
					},
				},
				DropShadow1 = ofx.com.blackmagicdesign.resolvefx.DropShadow {
					CtrlWShown = false,
					Inputs = {
						Source = Input {
							SourceOp = "Merge1",
							Source = "Output",
						},
						shadowStrength = Input { Value = 1, },
						shadowAngle = Input { Value = 37.5, },
						ShadowDistance = Input { Value = 0.01, },
						shadowBlur = Input { Value = 0.3, },
						shadowColorRed = Input { Value = 0, },
						shadowColorGreen = Input { Value = 0, },
						shadowColorBlue = Input { Value = 0, },
						isLegacyComp = Input { Value = 0, },
						blendGroup = Input { Value = 0, },
						blendIn = Input { Value = 1, },
						blend = Input { Value = 0, },
						ignoreContentShape = Input { Value = 0, },
						legacyIsProcessRGBOnly = Input { Value = 0, },
						IsNoTemporalFramesReqd = Input { Value = 0, },
						refreshTrigger = Input { Value = 1, },
						resolvefxVersion = Input { Value = "1.1", },
					},
					ViewInfo = OperatorInfo { Pos = { 330, 115.5 } },
				},
				TransformLast = Transform {
					CtrlWShown = false,
					NameSet = true,
					Inputs = {
						Center = Input {
							Expression = "TitleCenter",
						},
						Input = Input {
							SourceOp = "DropShadow1",
							Source = "Output",
						},
					},
					ViewInfo = OperatorInfo { Pos = { 330, 148.5 } },
					UserControls = ordered() {
						TitleCenter = {
							LINKS_Name = "Center",
							LINKID_DataType = "Point",
							INPID_InputControl = "OffsetControl",
							INPID_PreviewControl = "CrosshairControl",
							INP_DefaultX = 0.5,
							INP_DefaultY = 0.5,
							CHC_Style = "NormalCross",
							ICS_ControlPage = "Controls",
						},
					}
				},
				Text_0 = TextPlus {
					CtrlWShown = false,
					NameSet = true,
					Inputs = {
						GlobalOut = Input { Value = 149, },
						Width = Input { Value = 3840, },
						Height = Input { Value = 2160, },
						UseFrameFormatSettings = Input { Value = 1, },
						["Gamut.SLogVersion"] = Input { Value = FuID { "SLog2" }, },
						LayoutRotation = Input { Value = 1, },
						TransformRotation = Input { Value = 1, },
						Softness1 = Input { Value = 1, },
						Font = Input { Value = "Open Sans", },
						Style = Input { Value = "Bold", },
						VerticalJustificationNew = Input { Value = 3, },
						HorizontalJustificationNew = Input { Value = 3, },
					},
					ViewInfo = OperatorInfo { Pos = { 330, 82.5 } },
				},
				Text_1 = TextPlus {
					CtrlWShown = false,
					NameSet = true,
					Inputs = {
						GlobalOut = Input { Value = 149, },
						Width = Input { Value = 3840, },
						Height = Input { Value = 2160, },
						UseFrameFormatSettings = Input { Value = 1, },
						["Gamut.SLogVersion"] = Input { Value = FuID { "SLog2" }, },
						LayoutRotation = Input { Value = 1, },
						TransformRotation = Input { Value = 1, },
						Softness1 = Input { Value = 1, },
						VerticalJustificationNew = Input { Value = 3, },
						HorizontalLeftCenterRight = Input { Value = -1, },
						HorizontalJustificationNew = Input { Value = 3, },
						ElementShape5 = Input { Value = 2, },
						Level5 = Input { Value = 0, },
						--End = Input { Expression = "1-Options.AnimateCharWriteOn+Options.AnimateCharWriteOn*AnimValueM1.Value", },
						--Enabled5 = Input { Value = 1,},
						--Opacity5 = Input { Expression = "Options.AnimateBackground*AnimValue1.Value", },
						--LayoutSize = Input { Expression = "Text1.FontSize+Options.AnimateSize*AnimValue1.Value*Options.SizeFactor", },
					},
					ViewInfo = OperatorInfo { Pos = { 165, 49.5 } },
				},
				AnimValue1 = LUTLookup {
					CtrlWZoom = false,
					NameSet = true,
					Inputs = {
						Source = Input { Value = FuID { "Duration" }, },
						Curve = Input { Value = FuID { "Custom" }, },
						Lookup = Input {
							SourceOp = "AnimCurvesLookup",
							Source = "Value",
						},
						ClipLow = Input { Value = 1, },
						TimeScale = Input {
							Value = 0,
							Expression = "Merge1.AnimationTime==0 and 0 or (comp.RenderEnd-comp.RenderStart+1)/Merge1.AnimationTime",
						},
						TimeOffset = Input { Expression = "Merge1.AnimationStart/(comp.RenderEnd-comp.RenderStart+1)", },
					},
				},
				AnimCurvesLookup = LUTBezier {
					KeyColorSplines = {
						[0] = {
							[0] = { 0, RH = { 0.05, 0.2 }, Flags = { Linear = true } },
							[0.15] = { 1, LH = { 0.139247432518633, 0.79873310764898 }, RH = { 0.256227315594126, 2.02081194728436 } },
							[0.35] = { 1, LH = { 0.283333333333333, 1 }, RH = { 0.516666666666667, 1 } },
							[0.85] = { 1, LH = { 0.683333333333333, 1 }, RH = { 0.945977011494253, 0.9788058576297 }, Flags = { Linear = true } },
							[1] = { 0, LH = { 0.95, 0.333333333333333 } }
						}
					},
					SplineColor = { Red = 255, Green = 255, Blue = 255 },
					CtrlWZoom = false,
				},
				Text_2 = TextPlus {
					CtrlWShown = false,
					NameSet = true,
					Inputs = {
						GlobalOut = Input { Value = 149, },
						Width = Input { Value = 3840, },
						Height = Input { Value = 2160, },
						UseFrameFormatSettings = Input { Value = 1, },
						["Gamut.SLogVersion"] = Input { Value = FuID { "SLog2" }, },
						LayoutRotation = Input { Value = 1, },
						TransformRotation = Input { Value = 1, },
						Red1 = Input { Value = 0, },
						Blue1 = Input { Value = 0, },
						Softness1 = Input { Value = 1, },
						Font = Input { Value = "Open Sans", },
						Style = Input { Value = "Bold", },
						VerticalJustificationNew = Input { Value = 3, },
						HorizontalLeftCenterRight = Input { Value = -1, },
						HorizontalJustificationNew = Input { Value = 3, },
						ElementShape5 = Input { Value = 2, },
						Level5 = Input { Value = 0, },
						--End = Input { Expression = "1-Options.AnimateCharWriteOn+Options.AnimateCharWriteOn*AnimValueM2.Value", },
						--Enabled5 = Input { Value = 1,},
						--Opacity5 = Input { Expression = "Options.AnimateBackground*AnimValue2.Value", },
						--LayoutSize = Input { Expression = "Text2.FontSize+Options.AnimateSize*AnimValue2.Value*Options.SizeFactor", },
					},
					ViewInfo = OperatorInfo { Pos = { 165, 82.5 } },
				},
				AnimValue2 = LUTLookup {
					CtrlWZoom = false,
					NameSet = true,
					Inputs = {
						Source = Input { Value = FuID { "Duration" }, },
						Curve = Input { Value = FuID { "Custom" }, },
						Lookup = Input {
							SourceOp = "AnimCurvesLookup",
							Source = "Value",
						},
						ClipLow = Input { Value = 1, },
						TimeScale = Input {
							Value = 0,
							Expression = "Merge2.AnimationTime==0 and 0 or (comp.RenderEnd-comp.RenderStart+1)/Merge2.AnimationTime",
						},
						TimeOffset = Input { Expression = "Merge2.AnimationStart/(comp.RenderEnd-comp.RenderStart+1)", },
					},
				},
				Text_3 = TextPlus {
					CtrlWShown = false,
					NameSet = true,
					Inputs = {
						GlobalOut = Input { Value = 149, },
						Width = Input { Value = 3840, },
						Height = Input { Value = 2160, },
						UseFrameFormatSettings = Input { Value = 1, },
						["Gamut.SLogVersion"] = Input { Value = FuID { "SLog2" }, },
						LayoutRotation = Input { Value = 1, },
						TransformRotation = Input { Value = 1, },
						Blue1 = Input { Value = 0, },
						Softness1 = Input { Value = 1, },
						Font = Input { Value = "Open Sans", },
						Style = Input { Value = "Bold", },
						VerticalJustificationNew = Input { Value = 3, },
						HorizontalLeftCenterRight = Input { Value = -1, },
						HorizontalJustificationNew = Input { Value = 3, },
						ElementShape5 = Input { Value = 2, },
						Level5 = Input { Value = 0, },
						--End = Input { Expression = "1-Options.AnimateCharWriteOn+Options.AnimateCharWriteOn*AnimValueM3.Value", },
						--Enabled5 = Input { Value = 1,},
						--Opacity5 = Input { Expression = "Options.AnimateBackground*AnimValue3.Value", },
						--LayoutSize = Input { Expression = "Text3.FontSize+Options.AnimateSize*AnimValue3.Value*Options.SizeFactor", },
					},
					ViewInfo = OperatorInfo { Pos = { 165, 115.5 } },
				},
				AnimValue3 = LUTLookup {
					CtrlWZoom = false,
					NameSet = true,
					Inputs = {
						Source = Input { Value = FuID { "Duration" }, },
						Curve = Input { Value = FuID { "Custom" }, },
						Lookup = Input {
							SourceOp = "AnimCurvesLookup",
							Source = "Value",
						},
						ClipLow = Input { Value = 1, },
						TimeScale = Input {
							Value = 0,
							Expression = "Merge3.AnimationTime==0 and 0 or (comp.RenderEnd-comp.RenderStart+1)/Merge3.AnimationTime",
						},
						TimeOffset = Input { Expression = "Merge3.AnimationStart/(comp.RenderEnd-comp.RenderStart+1)", },
					},
				},
				Text_4 = TextPlus {
					CtrlWShown = false,
					NameSet = true,
					Inputs = {
						GlobalOut = Input { Value = 149, },
						Width = Input { Value = 3840, },
						Height = Input { Value = 2160, },
						UseFrameFormatSettings = Input { Value = 1, },
						["Gamut.SLogVersion"] = Input { Value = FuID { "SLog2" }, },
						LayoutRotation = Input { Value = 1, },
						TransformRotation = Input { Value = 1, },
						Red1 = Input { Value = 0, },
						Softness1 = Input { Value = 1, },
						Font = Input { Value = "Open Sans", },
						Style = Input { Value = "Bold", },
						VerticalJustificationNew = Input { Value = 3, },
						HorizontalLeftCenterRight = Input { Value = -1, },
						HorizontalJustificationNew = Input { Value = 3, },
						ElementShape5 = Input { Value = 2, },
						Level5 = Input { Value = 0, },
						--End = Input { Expression = "1-Options.AnimateCharWriteOn+Options.AnimateCharWriteOn*AnimValueM4.Value", },
						--Enabled5 = Input { Value = 1,},
						--Opacity5 = Input { Expression = "Options.AnimateBackground*AnimValue4.Value", },
						--LayoutSize = Input { Expression = "Text4.FontSize+Options.AnimateSize*AnimValue4.Value*Options.SizeFactor", },
					},
					ViewInfo = OperatorInfo { Pos = { 165, 148.5 } },
				},
				AnimValue4 = LUTLookup {
					CtrlWZoom = false,
					NameSet = true,
					Inputs = {
						Source = Input { Value = FuID { "Duration" }, },
						Curve = Input { Value = FuID { "Custom" }, },
						Lookup = Input {
							SourceOp = "AnimCurvesLookup",
							Source = "Value",
						},
						ClipLow = Input { Value = 1, },
						TimeScale = Input {
							Value = 0,
							Expression = "Merge4.AnimationTime==0 and 0 or (comp.RenderEnd-comp.RenderStart+1)/Merge4.AnimationTime",
						},
						TimeOffset = Input { Expression = "Merge4.AnimationStart/(comp.RenderEnd-comp.RenderStart+1)", },
					},
				},
				Text_5 = TextPlus {
					CtrlWShown = false,
					NameSet = true,
					Inputs = {
						GlobalOut = Input { Value = 149, },
						Width = Input { Value = 3840, },
						Height = Input { Value = 2160, },
						UseFrameFormatSettings = Input { Value = 1, },
						["Gamut.SLogVersion"] = Input { Value = FuID { "SLog2" }, },
						LayoutRotation = Input { Value = 1, },
						TransformRotation = Input { Value = 1, },
						Green1 = Input { Value = 0, },
						Softness1 = Input { Value = 1, },
						Font = Input { Value = "Open Sans", },
						Style = Input { Value = "Bold", },
						VerticalJustificationNew = Input { Value = 3, },
						HorizontalLeftCenterRight = Input { Value = -1, },
						HorizontalJustificationNew = Input { Value = 3, },
						ElementShape5 = Input { Value = 2, },
						Level5 = Input { Value = 0, },
						--End = Input { Expression = "1-Options.AnimateCharWriteOn+Options.AnimateCharWriteOn*AnimValueM5.Value", },
						--Enabled5 = Input { Value = 1,},
						--Opacity5 = Input { Expression = "Options.AnimateBackground*AnimValue5.Value", },
						--LayoutSize = Input { Expression = "Text5.FontSize+Options.AnimateSize*AnimValue5.Value*Options.SizeFactor", },
					},
					ViewInfo = OperatorInfo { Pos = { 165, 181.5 } },
				},
				AnimValue5 = LUTLookup {
					CtrlWZoom = false,
					NameSet = true,
					Inputs = {
						Source = Input { Value = FuID { "Duration" }, },
						Curve = Input { Value = FuID { "Custom" }, },
						Lookup = Input {
							SourceOp = "AnimCurvesLookup",
							Source = "Value",
						},
						ClipLow = Input { Value = 1, },
						TimeScale = Input {
							Value = 0,
							Expression = "Merge5.AnimationTime==0 and 0 or (comp.RenderEnd-comp.RenderStart+1)/Merge5.AnimationTime",
						},
						TimeOffset = Input { Expression = "Merge5.AnimationStart/(comp.RenderEnd-comp.RenderStart+1)", },
					},
				},
				Text_6 = TextPlus {
					CtrlWShown = false,
					NameSet = true,
					Inputs = {
						GlobalOut = Input { Value = 149, },
						Width = Input { Value = 3840, },
						Height = Input { Value = 2160, },
						UseFrameFormatSettings = Input { Value = 1, },
						["Gamut.SLogVersion"] = Input { Value = FuID { "SLog2" }, },
						LayoutRotation = Input { Value = 1, },
						TransformRotation = Input { Value = 1, },
						Green1 = Input { Value = 0, },
						Blue1 = Input { Value = 0, },
						Softness1 = Input { Value = 1, },
						Font = Input { Value = "Open Sans", },
						Style = Input { Value = "Bold", },
						VerticalJustificationNew = Input { Value = 3, },
						HorizontalLeftCenterRight = Input { Value = -1, },
						HorizontalJustificationNew = Input { Value = 3, },
						ElementShape5 = Input { Value = 2, },
						Level5 = Input { Value = 0, },
						--End = Input { Expression = "1-Options.AnimateCharWriteOn+Options.AnimateCharWriteOn*AnimValueM6.Value", },
						--Enabled5 = Input { Value = 1,},
						--Opacity5 = Input { Expression = "Options.AnimateBackground*AnimValue6.Value", },
						--LayoutSize = Input { Expression = "Text6.FontSize+Options.AnimateSize*AnimValue6.Value*Options.SizeFactor", },
					},
					ViewInfo = OperatorInfo { Pos = { 165, 214.5 } },
				},
				AnimValue6 = LUTLookup {
					CtrlWZoom = false,
					NameSet = true,
					Inputs = {
						Source = Input { Value = FuID { "Duration" }, },
						Curve = Input { Value = FuID { "Custom" }, },
						Lookup = Input {
							SourceOp = "AnimCurvesLookup",
							Source = "Value",
						},
						ClipLow = Input { Value = 1, },
						TimeScale = Input {
							Value = 0,
							Expression = "Merge6.AnimationTime==0 and 0 or (comp.RenderEnd-comp.RenderStart+1)/Merge6.AnimationTime",
						},
						TimeOffset = Input { Expression = "Merge6.AnimationStart/(comp.RenderEnd-comp.RenderStart+1)", },
					},
				},
				Background1 = Background {
					CtrlWZoom = false,
					CtrlWShown = false,
					Inputs = {
						GlobalOut = Input { Value = 149, },
						Width = Input { Value = 3840, },
						Height = Input { Value = 2160, },
						UseFrameFormatSettings = Input { Value = 1, },
						["Gamut.SLogVersion"] = Input { Value = FuID { "SLog2" }, },
						TopLeftRed = Input { Value = 1, },
						TopLeftGreen = Input { Value = 0.5, },
						TopLeftBlue = Input { Value = 0.5, },
					},
					ViewInfo = OperatorInfo { Pos = { 330, 16.5 } },
				},
				Background3 = Background {
					CtrlWZoom = false,
					CtrlWShown = false,
					Inputs = {
						GlobalOut = Input { Value = 149, },
						Width = Input { Value = 3840, },
						Height = Input { Value = 2160, },
						UseFrameFormatSettings = Input { Value = 1, },
						["Gamut.SLogVersion"] = Input { Value = FuID { "SLog2" }, },
						TopLeftRed = Input { Value = 1, },
						TopLeftGreen = Input { Value = 0.15, },
						TopLeftBlue = Input { Value = 0, },
					},
					ViewInfo = OperatorInfo { Pos = { 330, 49.5 } },
				},

				BC1 = BrightnessContrast {
					NameSet = true,
					Inputs = {
						Blend = Input { Value = 0, },
						Input = Input {
							SourceOp = "Text1",
							Source = "Output",
						},
					},
					ViewInfo = OperatorInfo { Pos = { -55, 49.5 } },
				},
				BC2 = BrightnessContrast {
					NameSet = true,
					Inputs = {
						Blend = Input { Value = 0, },
						Input = Input {
							SourceOp = "Text2",
							Source = "Output",
						},
					},
					ViewInfo = OperatorInfo { Pos = { -55, 82.5 } },
				},
				BC3 = BrightnessContrast {
					NameSet = true,
					Inputs = {
						Blend = Input { Value = 0, },
						Input = Input {
							SourceOp = "Text3",
							Source = "Output",
						},
					},
					ViewInfo = OperatorInfo { Pos = { -55, 115.5 } },
				},
				BC4 = BrightnessContrast {
					NameSet = true,
					Inputs = {
						Blend = Input { Value = 0, },
						Input = Input {
							SourceOp = "Text4",
							Source = "Output",
						},
					},
					ViewInfo = OperatorInfo { Pos = { -55, 148.5 } },
				},
				BC5 = BrightnessContrast {
					NameSet = true,
					Inputs = {
						Blend = Input { Value = 0, },
						Input = Input {
							SourceOp = "Text5",
							Source = "Output",
						},
					},
					ViewInfo = OperatorInfo { Pos = { -55, 181.5 } },
				},
				BC6 = BrightnessContrast {
					NameSet = true,
					Inputs = {
						Blend = Input { Value = 0, },
						Input = Input {
							SourceOp = "Text6",
							Source = "Output",
						},
					},
					ViewInfo = OperatorInfo { Pos = { -55, 214.5 } },
				}
				
			},
			UserControls = ordered() {
				Button_Donate = {
					ICD_Width = 1,
					INPID_InputControl = "ButtonControl",
					BTNCS_Execute = "url='https://www.buymeacoffee.com/essentialvideo'; os.execute('open '..url); os.execute('start '..url);",
					ICS_ControlPage = "Common",
					LINKID_DataType = "Number",
					LINKS_Name = "Buy Me a Coffee!",
				},
				Button_DonatePayPal = {
					ICD_Width = 1,
					INPID_InputControl = "ButtonControl",
					BTNCS_Execute = "url='https://paypal.me/essentialvideo'; os.execute('open '..url); os.execute('start '..url);",
					ICS_ControlPage = "Common",
					LINKID_DataType = "Number",
					LINKS_Name = "Donate! PayPal.me!",
				},
				Button_Subscribe = {
					ICD_Width = 1,
					INPID_InputControl = "ButtonControl",
					BTNCS_Execute = "url='https://www.youtube.com/@EssentialVideoEditing/videos?sub_confirmation=1'; os.execute('open '..url); os.execute('start '..url);",
					ICS_ControlPage = "Common",
					LINKID_DataType = "Number",
					LINKS_Name = "Subscribe YouTube Channel!",
				},
				Button_VideoLink = {
					ICD_Width = 1,
					INPID_InputControl = "ButtonControl",
					BTNCS_Execute = "url='https://youtu.be/EwohdTXqreM'; os.execute('open '..url); os.execute('start '..url);",
					ICS_ControlPage = "Common",
					LINKID_DataType = "Number",
					LINKS_Name = "YouTube Video (Update: 2023.12.12)",
				}
			}
		}
	},
	ActiveTool = "EssentialActiveCaption"
}