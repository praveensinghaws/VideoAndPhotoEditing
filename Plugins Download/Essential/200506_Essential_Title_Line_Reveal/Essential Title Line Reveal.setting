{
	Tools = ordered() {
		EssentialTitleLineReveal = GroupOperator {
			Inputs = ordered() {
				Input1 = InstanceInput {
					SourceOp = "MainText",
					Source = "StyledText",
				},
				Input2 = InstanceInput {
					SourceOp = "MainText",
					Source = "Font",
					ControlGroup = 2,
				},
				Input3 = InstanceInput {
					SourceOp = "MainText",
					Source = "Style",
					ControlGroup = 2,
				},
				Input4 = InstanceInput {
					SourceOp = "MainText",
					Source = "Red1Clone",
					Name = "Color",
					ControlGroup = 3,
					Default = 1,
				},
				Input5 = InstanceInput {
					SourceOp = "MainText",
					Source = "Green1Clone",
					ControlGroup = 3,
					Default = 1,
				},
				Input6 = InstanceInput {
					SourceOp = "MainText",
					Source = "Blue1Clone",
					ControlGroup = 3,
					Default = 1,
				},
				Input7 = InstanceInput {
					SourceOp = "MainText",
					Source = "Alpha1Clone",
					ControlGroup = 3,
					Default = 1,
				},
				Input8 = InstanceInput {
					SourceOp = "MainText",
					Source = "Size",
					Default = 0.08,
				},
				Input9 = InstanceInput {
					SourceOp = "MainText",
					Source = "CharacterSpacingClone",
					Name = "Tracking",
					Default = 1,
				},
				Input10 = InstanceInput {
					SourceOp = "MainText",
					Source = "LineSpacingClone",
					Default = 1,
				},
				InputTextCenter = InstanceInput {
					SourceOp = "MainText",
					Source = "Center",
					Name = "Center",
				},
				InputLabelLineControls = InstanceInput {
					SourceOp = "Line",
					Source = "LabelLineControls",
					Name = "Line",
				},
				Input42 = InstanceInput {
					SourceOp = "Line",
					Source = "LineWidth",
					Name = "Thickness",
					Default = 0.01,
				},
				Input44 = InstanceInput {
					SourceOp = "Line",
					Source = "ExtendLength",
					Name = "Extend Length",
					Default = 0,
				},
				InputPaddingX = InstanceInput {
					SourceOp = "Line",
					Source = "PaddingX",
                    Default = 0.03,
				},
				InputPaddingY = InstanceInput {
					SourceOp = "Line",
					Source = "PaddingY",
                    Default = 0.05,
				},
				Input12 = InstanceInput {
					SourceOp = "LineColor",
					Source = "TopLeftRed",
					Name = "Color",
					ControlGroup = 8,
					Default = 1,
				},
				Input13 = InstanceInput {
					SourceOp = "LineColor",
					Source = "TopLeftGreen",
					ControlGroup = 8,
					Default = 0.5764705882353,
				},
				Input14 = InstanceInput {
					SourceOp = "LineColor",
					Source = "TopLeftBlue",
					ControlGroup = 8,
					Default = 0,
				},
				Input15 = InstanceInput {
					SourceOp = "LineColor",
					Source = "TopLeftAlpha",
					ControlGroup = 8,
					Default = 1,
				},
				InputLabelAnimation = InstanceInput {
					SourceOp = "Line",
					Source = "LabelAnimation",
				},
				Input41 = InstanceInput {
					SourceOp = "Line",
					Source = "WipeDirection",
					Name = "Direction",
					Default = 0,
				},
				InputCenterReveal = InstanceInput {
					SourceOp = "Line",
					Source = "CenterReveal",
					Name = "Center Reveal",
				},
				Input40 = InstanceInput {
					SourceOp = "Line",
					Source = "AnimationTime",
					Name = "Animation Time",
					Default = 15,
				},
				Input39 = InstanceInput {
					SourceOp = "Line",
					Source = "LineAnimationTime",
					Name = "Line Animation",
					Default = 5,
				},
				Input45 = InstanceInput {
					SourceOp = "AnimCurvesIn",
					Source = "EaseIn",
					Name = "Ease Text In",
					Width = 0.5,
				},
				Input46 = InstanceInput {
					SourceOp = "AnimCurvesIn",
					Source = "EaseOut",
					Width = 0.5,
				},
				Input47 = InstanceInput {
					SourceOp = "AnimCurvesOut",
					Source = "EaseIn",
					Name = "Ease Text Out",
					Width = 0.5,
				},
				Input48 = InstanceInput {
					SourceOp = "AnimCurvesOut",
					Source = "EaseOut",
					Width = 0.5,
				}
			},
			Outputs = {
				MainOutput1 = InstanceOutput {
					SourceOp = "Merge2",
					Source = "Output",
				}
			},
			ViewInfo = GroupInfo {
				Pos = { -220, 49.5 },
				Flags = {
					AllowPan = false,
					GridSnap = true,
					AutoSnap = true,
					RemoveRouters = true
				},
				Size = { 588.501, 135.269, 173.722, 24.7115 },
				Direction = "Horizontal",
				PipeStyle = "Direct",
				Scale = 1,
				Offset = { 0, 0 }
			},
			Tools = ordered() {
				MainText = TextPlus {
					NameSet = true,
					Inputs = {
						ElementShape5 = Input { Value = 2, },
						Softness5 = Input { Value = 1, },
						Position5 = Input { Value = 1, },
						EffectMask = Input {
							SourceOp = "Transform1",
							Source = "Output",
						},
						GlobalOut = Input { Value = 149, },
						Width = Input { Value = 3840, },
						Height = Input { Value = 2160, },
						UseFrameFormatSettings = Input { Value = 1, },
						["Gamut.SLogVersion"] = Input { Value = FuID { "SLog2" }, },
						LayoutRotation = Input { Value = 1, },
						CharacterSpacing = Input { Value = 1.08, },
						TransformRotation = Input { Value = 1, },
						Softness1 = Input { Value = 1, },
						StyledText = Input { Value = "TITLE REVEAL", },
						Font = Input { Value = "Open Sans", },
						Style = Input { Value = "Bold", },
						VerticalJustificationNew = Input { Value = 3, },
						HorizontalJustificationNew = Input { Value = 3, },
						Softness8 = Input { Value = 1, },
					},
					ViewInfo = OperatorInfo { Pos = { 0, 16.5 } },
				},
				Merge1 = Merge {
					CtrlWShown = false,
					NameSet = true,
					Inputs = {
						Background = Input {
							SourceOp = "Transform3",
							Source = "Output",
						},
						Foreground = Input {
							SourceOp = "LineColor",
							Source = "Output",
						},
						PerformDepthMerge = Input { Value = 0, },
					},
					ViewInfo = OperatorInfo { Pos = { 220, 16.5 } },
				},
				Transform1 = Transform {
					CtrlWShown = false,
					Inputs = {
						EffectMask = Input {
							SourceOp = "Transform2",
							Source = "Output",
						},
						MultiplyByMask = Input { Value = 1, },
						Center = Input {
							SourceOp = "Expression1",
							Source = "PointResult",
						},
						Input = Input {
							SourceOp = "TextMask",
							Source = "Mask",
						},
					},
					ViewInfo = OperatorInfo { Pos = { 0, 49.5 } },
				},
				Expression1 = Expression {
					CtrlWZoom = false,
					Inputs = {
						n1 = Input {
							Value = 0.500002384948731,
							Expression = ":f={1,-1,0,0}; v=f[n3]*TextMask.Width*n4; return 0.5-v+Line.AnimateIn*v-Line.AnimateOut*v",
						},
						n2 = Input {
							Value = 0.5,
							Expression = ":f={0,0,1,-1}; v=f[n3]*TextMask.Height*n4; return 0.5-v+Line.AnimateIn*v-Line.AnimateOut*v",
						},
						n3 = Input {
							Value = 1,
							Expression = "Line.WipeDirection+1",
						},
						n4 = Input {
							Value = 0.5,
							Expression = "Line.CenterReveal==1 and 0.5 or 1",
						},
						PointExpressionX = Input { Value = "n1", },
						PointExpressionY = Input { Value = "n2", },
					},
				},
				LineColor = Background {
					CtrlWShown = false,
					NameSet = true,
					Inputs = {
						EffectMask = Input {
							SourceOp = "Line",
							Source = "Mask",
						},
						GlobalOut = Input { Value = 149, },
						Width = Input { Value = 3840, },
						Height = Input { Value = 2160, },
						UseFrameFormatSettings = Input { Value = 1, },
						["Gamut.SLogVersion"] = Input { Value = FuID { "SLog2" }, },
						TopLeftRed = Input { Value = 1, },
						TopLeftGreen = Input { Value = 0.5764705882353, },
					},
					ViewInfo = OperatorInfo { Pos = { 220, 49.5 } },
				},
				Line = RectangleMask {
					NameSet = true,
					Inputs = {
						Filter = Input { Value = FuID { "Fast Gaussian" }, },
						MaskWidth = Input { Value = 3840, },
						MaskHeight = Input { Value = 2160, },
						PixelAspect = Input { Value = { 1, 1 }, },
						UseFrameFormatSettings = Input { Value = 1, },
						ClippingMode = Input { Value = FuID { "None" }, },
						Center = Input {
							SourceOp = "Expression2",
							Source = "PointResult",
						},
						Width = Input {
							Value = 0.01,
							Expression = ":f={0,0,1,1};d=f[WipeDirection+1]; return (TextMask.Width*d+ExtendLength*d+LineWidth*(1-d))*iif(d==1 and LineAnimationTime>0,LineAnimateIn*LineAnimateOut,1)",
						},
						Height = Input {
							Value = 0.115740740740741,
							Expression = ":f={1,1,0,0};d=f[WipeDirection+1]; return (TextMask.Height*d+ExtendLength*d+LineWidth*(1-d))*iif(d==1 and LineAnimationTime>0,LineAnimateIn*LineAnimateOut,1)",
						},
						AnimateIn = Input {
							SourceOp = "AnimCurvesIn",
							Source = "Value",
						},
						AnimateOut = Input {
							SourceOp = "AnimCurvesOut",
							Source = "Value",
						},
						LineAnimateIn = Input {
							SourceOp = "LineAnimCurvesIn",
							Source = "Value",
						},
						LineAnimateOut = Input {
							SourceOp = "LineAnimCurvesOut",
							Source = "Value",
						},
                        PaddingX = Input { Value = 0.03, },
				        PaddingY = Input { Value = 0.05, },
						CenterReveal = Input { Value = 1, },
					},
					ViewInfo = OperatorInfo { Pos = { 220, 82.5 } },
					UserControls = ordered() {
						AnimateIn = { INP_Integer = false, LINKID_DataType = "Number", INPID_InputControl = "SliderControl", INP_MinScale = 0, INP_MaxScale = 1, LINKS_Name = "AnimateIn", },
						AnimateOut = { INP_Integer = false, LINKID_DataType = "Number", INPID_InputControl = "SliderControl", INP_MinScale = 0, INP_MaxScale = 1, LINKS_Name = "AnimateOut", },
						LineAnimateIn = {
							INP_Integer = false,
							LINKID_DataType = "Number",
							INPID_InputControl = "SliderControl",
							INP_MinScale = 0,
							INP_MaxScale = 1,
							LINKS_Name = "LineAnimateIn",
						},
						LineAnimationTime = {
							INP_MaxAllowed = 150,
							INP_Integer = true,
							INPID_InputControl = "SliderControl",
							INP_MaxScale = 30,
							INP_Default = 5,
							INP_MinScale = 0,
							INP_MinAllowed = 0,
							LINKID_DataType = "Number",
							INP_External = false,
							LINKS_Name = "LineAnimationTime",
						},
						AnimationTime = {
							INP_MaxAllowed = 300,
							INP_Integer = true,
							INPID_InputControl = "SliderControl",
							INP_MaxScale = 150,
							INP_Default = 15,
							INP_MinScale = 15,
							INP_MinAllowed = 15,
							LINKID_DataType = "Number",
							INP_External = false,
							LINKS_Name = "AnimationTime",
						},
						WipeDirection = {
							{ MBTNC_AddButton = "Right" },
							{ MBTNC_AddButton = "Left" },
							{ MBTNC_AddButton = "Up" },
							{ MBTNC_AddButton = "Down" },
							INP_Integer = false,
							INPID_InputControl = "MultiButtonControl",
							MBTNC_ShowBasicButton = true,
							INP_External = false,
							LINKID_DataType = "Number",
							MBTNC_ShowName = false,
							MBTNC_StretchToFit = true,
							MBTNC_ShowToolTip = false,
							LINKS_Name = "WipeDirection",
						},
						LineWidth = {
							INP_Default = 0.01,
							INP_Integer = false,
							INP_External = false,
							INPID_InputControl = "SliderControl",
							INP_MinScale = 0,
							LINKID_DataType = "Number",
							INP_MaxScale = 0.5,
							LINKS_Name = "Line Width",
						},
						LineAnimateOut = {
							INP_Integer = false,
							LINKID_DataType = "Number",
							INPID_InputControl = "SliderControl",
							INP_MinScale = 0,
							INP_MaxScale = 1,
							LINKS_Name = "LineAnimateOut",
						},
						ExtendLength = {
							INP_MaxAllowed = 1,
							INP_Integer = false,
							INPID_InputControl = "SliderControl",
							INP_MaxScale = 1,
							INP_MinScale = -1,
							INP_MinAllowed = -1,
							LINKID_DataType = "Number",
							INP_External = false,
							LINKS_Name = "ExtendLength",
						},
						PaddingX = {
							INP_MaxAllowed = 5,
							INP_Integer = false,
							INPID_InputControl = "SliderControl",
							INP_MaxScale = 2,
							INP_MinScale = 0,
							INP_MinAllowed = -2,
							LINKID_DataType = "Number",
							INP_External = false,
							LINKS_Name = "Padding X",
						},
						PaddingY = {
							INP_MaxAllowed = 5,
							INP_Integer = false,
							INPID_InputControl = "SliderControl",
							INP_MaxScale = 2,
							INP_MinScale = 0,
							INP_MinAllowed = -2,
							LINKID_DataType = "Number",
							INP_External = false,
							LINKS_Name = "Padding Y",
						},
						LabelLineControls = {
							INP_Integer = false,
							LBLC_DropDownButton = true,
							LINKID_DataType = "Number",
							LBLC_NumInputs = 8,
							INP_Default = 1,
							INPID_InputControl = "LabelControl",
							LINKS_Name = "Line Controls",
						},
						LabelAnimation = {
							INP_Integer = false,
							LBLC_DropDownButton = true,
							LINKID_DataType = "Number",
							LBLC_NumInputs = 7,
							INP_Default = 1,
							INPID_InputControl = "LabelControl",
							LINKS_Name = "Animation",
						},
						CenterReveal = {
							CBC_TriState = false,
							INP_Integer = false,
							INP_External = false,
							LINKID_DataType = "Number",
							INPID_InputControl = "CheckboxControl",
							LINKS_Name = "CenterReveal",
						}
					}
				},
				Expression2 = Expression {
					Inputs = {
						p1 = Input { Expression = "MainText.Center", },
						n1 = Input {
							Value = 0.70351800994873,
							Expression = ":f={1,-1,0,0}; return Transform1.Center.X + f[n3]*TextMask.Width/2",
						},
						n2 = Input {
							Value = 0.5,
							Expression = ":f={0,0,1,-1}; return Transform1.Center.Y + f[n3]*TextMask.Height/2",
						},
						n3 = Input {
							Value = 1,
							Expression = "Line.WipeDirection+1",
						},
						PointExpressionX = Input { Value = "n1+p1X-0.5", },
						PointExpressionY = Input { Value = "n2+p1Y-0.5", },
					},
				},
				AnimCurvesIn = LUTLookup {
					NameSet = true,
					Inputs = {
						Curve = Input { Value = FuID { "Easing" }, },
						EaseIn = Input { Value = FuID { "Expo" }, },
						EaseOut = Input { Value = FuID { "Expo" }, },
						Lookup = Input {
							SourceOp = "AnimCurvesInLookup",
							Source = "Value",
						},
						TimeScale = Input {
							Value = 10,
							Expression = "((comp.RenderEnd-comp.RenderStart+1))/Line.AnimationTime",
						},
						TimeOffset = Input {
							Value = 0.0333333333333333,
							Expression = "Line.LineAnimationTime/(comp.RenderEnd-comp.RenderStart+1)",
						},
					},
				},
				AnimCurvesInLookup = LUTBezier {
					KeyColorSplines = {
						[0] = {
							[0] = { 0, RH = { 0.333333333333333, 0.333333333333333 }, Flags = { Linear = true } },
							[1] = { 1, LH = { 0.666666666666667, 0.666666666666667 }, Flags = { Linear = true } }
						}
					},
					SplineColor = { Red = 255, Green = 255, Blue = 255 },
				},
				AnimCurvesOut = LUTLookup {
					NameSet = true,
					Inputs = {
						Source = Input { Value = FuID { "Duration" }, },
						Curve = Input { Value = FuID { "Easing" }, },
						EaseIn = Input { Value = FuID { "Expo" }, },
						EaseOut = Input { Value = FuID { "Expo" }, },
						Lookup = Input {
							SourceOp = "AnimCurvesOutLookup",
							Source = "Value",
						},
						TimeScale = Input {
							Value = 10,
							Expression = "AnimCurvesIn.TimeScale",
						},
						TimeOffset = Input {
							Value = 0.866666666666667,
							Expression = "1-(Line.AnimationTime+Line.LineAnimationTime)/(comp.RenderEnd-comp.RenderStart+1)",
						},
					},
				},
				AnimCurvesOutLookup = LUTBezier {
					KeyColorSplines = {
						[0] = {
							[0] = { 0, RH = { 0.333333333333333, 0.333333333333333 }, Flags = { Linear = true } },
							[1] = { 1, LH = { 0.666666666666667, 0.666666666666667 }, Flags = { Linear = true } }
						}
					},
					SplineColor = { Red = 255, Green = 255, Blue = 255 },
				},
				LineAnimCurvesIn = LUTLookup {
					NameSet = true,
					Inputs = {
						Source = Input { Value = FuID { "Duration" }, },
						Curve = Input { Value = FuID { "Easing" }, },
						Lookup = Input {
							SourceOp = "AnimCurves3Lookup",
							Source = "Value",
						},
						TimeScale = Input {
							Value = 30,
							Expression = "Line.LineAnimationTime>0 and (comp.RenderEnd-comp.RenderStart+1)/Line.LineAnimationTime or 0",
						},
					},
				},
				AnimCurves3Lookup = LUTBezier {
					KeyColorSplines = {
						[0] = {
							[0] = { 0, RH = { 0.333333333333333, 0.333333333333333 }, Flags = { Linear = true } },
							[1] = { 1, LH = { 0.666666666666667, 0.666666666666667 }, Flags = { Linear = true } }
						}
					},
					SplineColor = { Red = 255, Green = 255, Blue = 255 },
				},
				LineAnimCurvesOut = LUTLookup {
					CtrlWZoom = false,
					NameSet = true,
					Inputs = {
						Source = Input { Value = FuID { "Duration" }, },
						Curve = Input { Value = FuID { "Easing" }, },
						Lookup = Input {
							SourceOp = "AnimCurves1Lookup",
							Source = "Value",
						},
						Invert = Input { Value = 1, },
						TimeScale = Input {
							Value = 30,
							Expression = "LineAnimCurvesIn.TimeScale",
						},
						TimeOffset = Input {
							Value = 0.96,
							Expression = "1-(Line.LineAnimationTime+1)/(comp.RenderEnd-comp.RenderStart+1)",
						},
					},
				},
				AnimCurves1Lookup = LUTBezier {
					KeyColorSplines = {
						[0] = {
							[0] = { 0, RH = { 0.333333333333333, 0.333333333333333 }, Flags = { Linear = true } },
							[1] = { 1, LH = { 0.666666666666667, 0.666666666666667 }, Flags = { Linear = true } }
						}
					},
					SplineColor = { Red = 255, Green = 255, Blue = 255 },
				},
				Instance_LineColor = Background {
					CtrlWShown = false,
					NameSet = true,
					SourceOp = "LineColor",
					Inputs = {
						EffectMask = Input {
							SourceOp = "Line2",
							Source = "Mask",
						},
						SettingsNest = Input { },
						ImageNest = Input { },
						["Gamut.ColorSpaceNest"] = Input { },
						["Gamut.GammaSpaceNest"] = Input { },
						BackgroundNest = Input { },
						CommentsNest = Input { },
						FrameRenderScriptNest = Input { },
						StartRenderScripts = Input { },
						EndRenderScripts = Input { },
					},
					ViewInfo = OperatorInfo { Pos = { 330, 49.5 } },
				},
				Merge2 = Merge {
					CtrlWShown = false,
					Inputs = {
						Blend = Input { Expression = "Line.CenterReveal", },
						Background = Input {
							SourceOp = "Merge1",
							Source = "Output",
						},
						Foreground = Input {
							SourceOp = "Instance_LineColor",
							Source = "Output",
						},
						PerformDepthMerge = Input { Value = 0, },
					},
					ViewInfo = OperatorInfo { Pos = { 330, 16.5 } },
				},
				Line2 = RectangleMask {
					CtrlWShown = false,
					NameSet = true,
					Inputs = {
						Filter = Input { Value = FuID { "Fast Gaussian" }, },
						MaskWidth = Input { Value = 3840, },
						MaskHeight = Input { Value = 2160, },
						PixelAspect = Input { Value = { 1, 1 }, },
						UseFrameFormatSettings = Input { Value = 1, },
						ClippingMode = Input { Value = FuID { "None" }, },
						Center = Input {
							Value = { 0.296481990051269, 0.5 },
							Expression = "Point(2*MainText.Center.X-Line.Center.X, 2*MainText.Center.Y-Line.Center.Y)",
						},
						Width = Input {
							Value = 0.01,
							Expression = "Line.Width",
						},
						Height = Input {
							Value = 0.115740740740741,
							Expression = "Line.Height",
						},
					},
					ViewInfo = OperatorInfo { Pos = { 330, 82.5 } },
				},
				Transform2 = Transform {
					CtrlWShown = false,
					Inputs = {
						Blend = Input { Expression = "Line.CenterReveal", },
						MultiplyByMask = Input { Value = 1, },
						Center = Input { Expression = "Point(1-Transform1.Center.X, 1-Transform1.Center.Y)", },
						Input = Input {
							SourceOp = "TextMask",
							Source = "Mask",
						},
					},
					ViewInfo = OperatorInfo { Pos = { -110, 49.5 } },
				},
				Transform3 = Transform {
					CtrlWShown = false,
					Inputs = {
						Center = Input {
							SourceOp = "Expression3",
							Source = "PointResult",
						},
						Input = Input {
							SourceOp = "MainText",
							Source = "Output",
						},
					},
					ViewInfo = OperatorInfo { Pos = { 110, 16.5 } },
				},
				Expression3 = Expression {
					CtrlWZoom = false,
					Inputs = {
						n1 = Input {
							Value = 0.5,
							Expression = ":f={1,-1,0,0};v=f[n4]; return iif(n3==1 or f[n4]==0, 0.5, 0.5+0.01*f[n4]*(1-Line.AnimateIn*(1-Line.AnimateOut)))",
						},
						n2 = Input {
							Value = 0.5,
							Expression = ":f={0,0,1,-1};v=f[n4]; return iif(n3==1 or f[n4]==0, 0.5, 0.5+0.01*f[n4]*(1-Line.AnimateIn*(1-Line.AnimateOut)))",
						},
						n3 = Input {
							Value = 1,
							Expression = "Line.CenterReveal",
						},
						n4 = Input {
							Value = 1,
							Expression = "Line.WipeDirection+1",
						},
						PointExpressionX = Input { Value = "n1", },
						PointExpressionY = Input { Value = "n2", },
					},
				},
				TextArea = TextPlus {
					NameSet = true,
					SourceOp = "MainText",
					Inputs = {
						Softness8 = Input { Value = 1, },
						SettingsNest = Input { },
						ImageNest = Input { },
						["Gamut.ColorSpaceNest"] = Input { },
						["Gamut.GammaSpaceNest"] = Input { },
						Layout = Input { },
						LayoutRotation = Input { Value = 1, },
						Background = Input { },
						TransformTransform = Input { },
						TransformRotation = Input { Value = 1, },
						TransformShear = Input { },
						TransformSize = Input { },
						Properties1 = Input { },
						Softness1 = Input { Value = 1, },
						Position1 = Input { },
						Rotation1 = Input { },
						Shear1 = Input { },
						Size1 = Input { },
						TextText = Input { },
						TabSpacing = Input { },
						AdvancedFontControls = Input { },
						Internal = Input { },
						CommentsNest = Input { },
						FrameRenderScriptNest = Input { },
						StartRenderScripts = Input { },
						EndRenderScripts = Input { },
						EffectMask = Input { }
					},
					ViewInfo = OperatorInfo { Pos = { -110, 16.5 } },
				},
				TextMask = RectangleMask {
					NameSet = true,
					Inputs = {
						Filter = Input { Value = FuID { "Fast Gaussian" }, },
						MaskWidth = Input { Value = 3840, },
						MaskHeight = Input { Value = 2160, },
						PixelAspect = Input { Value = { 1, 1 }, },
						UseFrameFormatSettings = Input { Value = 1, },
						ClippingMode = Input { Value = FuID { "None" }, },
						Center = Input { Expression = "TextArea.Center", },
						Width = Input {
							Value = 0.377083333333333,
							Expression = "(TextArea.Output.DataWindow[3]-TextArea.Output.DataWindow[1]+1)/TextArea.Width + Line.PaddingX",
						},
						Height = Input {
							Value = 0.0615740740740741,
							Expression = "(TextArea.Output.DataWindow[4]-TextArea.Output.DataWindow[2]+1)/TextArea.Height+Line.PaddingY",
						},
					},
					ViewInfo = OperatorInfo { Pos = { 0, 82.5 } },
				}
			},
		}
	},
	ActiveTool = "EssentialTitleLineReveal"
}